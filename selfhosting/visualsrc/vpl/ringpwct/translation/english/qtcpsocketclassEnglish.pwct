# Visual Source File 

cVisualSourceFileVersion = '1.0.0'
cVisualLanguageName      = 'RingPWCT'
cNaturalLanguageName     = 'english'
nStepsID                 = 15		
nInteractionsID          = 15

aStepsTable = [
	[
		1,
		0,
		[
			[
				"name",
				"Start Point"
			],
			[
				"active",
				1
			],
			[
				"code",
				""
			],
			[
				"interactionid",
				1
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			]
		]
	],
	[
		2,
		1,
		[
			[
				"name",
				"/*"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#/*
"
			],
			[
				"interactionid",
				2
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"/*"
			]
		]
	],
	[
		3,
		1,
		[
			[
				"name",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Project : Programming Without Coding Technology (PWCT) Version 2.0
"
			],
			[
				"interactionid",
				3
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			]
		]
	],
	[
		4,
		1,
		[
			[
				"name",
				"**	File Purpose :  qtcpsocketclass Component"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	File Purpose :  qtcpsocketclass Component
"
			],
			[
				"interactionid",
				4
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	File Purpose :  qtcpsocketclass Component"
			]
		]
	],
	[
		5,
		1,
		[
			[
				"name",
				"**	Date : 2021.08.09"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Date : 2021.08.09
"
			],
			[
				"interactionid",
				5
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Date : 2021.08.09"
			]
		]
	],
	[
		6,
		1,
		[
			[
				"name",
				"**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>
"
			],
			[
				"interactionid",
				6
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Author :  Mahmoud Fayed "
			]
		]
	],
	[
		7,
		1,
		[
			[
				"name",
				"*/"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#*/
"
			],
			[
				"interactionid",
				7
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"*/"
			]
		]
	],
	[
		8,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_TITLE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;QTcpSocket&nbsp;Class&nbsp;Component&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_TITLE = "+char(34)+"QTcpSocket Class Component"+char(34)+""
			],
			[
				"interactionid",
				8
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_TITLE = "+char(34)+"QTcpSocket Class Component"+char(34)+""
			]
		]
	],
	[
		9,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Object&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE = "+char(34)+"Object"+char(34)+""
			],
			[
				"interactionid",
				9
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE = "+char(34)+"Object"+char(34)+""
			]
		]
	],
	[
		10,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE2</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Method&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2 = "+char(34)+"Method"+char(34)+""
			],
			[
				"interactionid",
				10
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2 = "+char(34)+"Method"+char(34)+""
			]
		]
	],
	[
		11,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE2LIST</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;abort(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;atEnd(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;bind(QHostAddress&nbsp;address,&nbsp;int&nbsp;port,&nbsp;QAbstractSocket::BindFlag&nbsp;mode)&nbsp;--&gt;&nbsp;bool&quot;,&quot;blockSignals(bool&nbsp;block)&nbsp;--&gt;&nbsp;bool&quot;,&quot;bytesAvailable(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;bytesToWrite(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;canReadLine(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;children(void)&nbsp;--&gt;&nbsp;QObjectList&quot;,&quot;close(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;connectToHost(QString&nbsp;hostName,&nbsp;int&nbsp;port,&nbsp;QIODevice::OpenModeFlag&nbsp;openMode,&nbsp;QAbstractSocket::NetworkLayerProtocol&nbsp;protocol)&nbsp;--&gt;&nbsp;void&quot;,&quot;delete(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;deleteLater(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;disconnectFromHost(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;dumpObjectInfo(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;dumpObjectTree(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;error(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;errorString(void)&nbsp;--&gt;&nbsp;QString&quot;,&quot;flush(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;getaboutToCloseEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getbytesWrittenEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getChar(char&nbsp;*c)&nbsp;--&gt;&nbsp;bool&quot;,&quot;getconnectedEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getdisconnectedEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;geterrorEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;gethostFoundEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getproxyAuthenticationRequiredEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getreadChannelFinishedEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getreadyReadEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;getstateChangedEvent(void)&nbsp;--&gt;&nbsp;char&quot;,&quot;inherits(char&nbsp;*className)&nbsp;--&gt;&nbsp;bool&quot;,&quot;init(parent)&nbsp;--&gt;&nbsp;object&quot;,&quot;installEventFilter(QObject&nbsp;*filterObj)&nbsp;--&gt;&nbsp;void&quot;,&quot;isOpen(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isReadable(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isSequential(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isTextModeEnabled(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isValid(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isWidgetType(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isWritable(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;killTimer(int&nbsp;id)&nbsp;--&gt;&nbsp;void&quot;,&quot;localAddress(void)&nbsp;--&gt;&nbsp;QHostAddress&quot;,&quot;localPort(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;moveToThread(QThread&nbsp;*targetThread)&nbsp;--&gt;&nbsp;void&quot;,&quot;objectName(void)&nbsp;--&gt;&nbsp;QString&quot;,&quot;objectpointer(void)&nbsp;--&gt;&nbsp;pointer&quot;,&quot;open(QIODevice::OpenMode&nbsp;flags)&nbsp;--&gt;&nbsp;bool&quot;,&quot;openMode(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;parent(void)&nbsp;--&gt;&nbsp;QObject&quot;,&quot;pauseMode(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;peek(char&nbsp;*data,&nbsp;int&nbsp;maxSize)&nbsp;--&gt;&nbsp;int&quot;,&quot;peerAddress(void)&nbsp;--&gt;&nbsp;QHostAddress&quot;,&quot;peerName(void)&nbsp;--&gt;&nbsp;QString&quot;,&quot;peerPort(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;pos(void)&nbsp;--&gt;&nbsp;qint64&quot;,&quot;property(char&nbsp;*name)&nbsp;--&gt;&nbsp;QVariant&quot;,&quot;proxy(void)&nbsp;--&gt;&nbsp;QNetworkProxy&quot;,&quot;putChar(char&nbsp;c)&nbsp;--&gt;&nbsp;bool&quot;,&quot;read(char&nbsp;*data,&nbsp;int&nbsp;maxSize)&nbsp;--&gt;&nbsp;int&quot;,&quot;readAll(void)&nbsp;--&gt;&nbsp;QByteArray&quot;,&quot;readBufferSize(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;readLine(char&nbsp;*data,&nbsp;int&nbsp;maxSize)&nbsp;--&gt;&nbsp;int&quot;,&quot;removeEventFilter(QObject&nbsp;*obj)&nbsp;--&gt;&nbsp;void&quot;,&quot;resume(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;seek(qint64&nbsp;pos)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setaboutToCloseEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setbytesWrittenEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setconnectedEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setdisconnectedEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;seterrorEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;sethostFoundEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setObjectName(QString)&nbsp;--&gt;&nbsp;void&quot;,&quot;setParent(QObject&nbsp;*parent)&nbsp;--&gt;&nbsp;void&quot;,&quot;setPauseMode(QAbstractSocket::PauseMode&nbsp;pauseMode)&nbsp;--&gt;&nbsp;void&quot;,&quot;setProperty(char&nbsp;*name,&nbsp;QVariant)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_2(char&nbsp;*name,&nbsp;int)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_3(char&nbsp;*name,&nbsp;float)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_4(char&nbsp;*name,&nbsp;double)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_5(char&nbsp;*name,&nbsp;QString)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_double(char&nbsp;*name,&nbsp;double)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_float(char&nbsp;*name,&nbsp;float)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_int(char&nbsp;*name,&nbsp;int)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProperty_string(char&nbsp;*name,&nbsp;QString)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setProxy(QNetworkProxy&nbsp;networkProxy)&nbsp;--&gt;&nbsp;void&quot;,&quot;setproxyAuthenticationRequiredEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setReadBufferSize(int&nbsp;size)&nbsp;--&gt;&nbsp;void&quot;,&quot;setreadChannelFinishedEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setreadyReadEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setSocketDescriptor(qintptr&nbsp;socketDescriptor,&nbsp;QAbstractSocket::SocketState&nbsp;socketState,&nbsp;QIODevice::OpenModeFlag&nbsp;openMode)&nbsp;--&gt;&nbsp;bool&quot;,&quot;setSocketOption(QAbstractSocket::SocketOption&nbsp;option,&nbsp;QVariant&nbsp;value)&nbsp;--&gt;&nbsp;void&quot;,&quot;setstateChangedEvent(char&nbsp;*)&nbsp;--&gt;&nbsp;void&quot;,&quot;setTextModeEnabled(bool&nbsp;enabled)&nbsp;--&gt;&nbsp;void&quot;,&quot;signalsBlocked(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;size(void)&nbsp;--&gt;&nbsp;qint64&quot;,&quot;socketDescriptor(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;socketOption(QAbstractSocket::SocketOption&nbsp;option)&nbsp;--&gt;&nbsp;QVariant&quot;,&quot;socketType(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;startTimer(int&nbsp;interval)&nbsp;--&gt;&nbsp;int&quot;,&quot;state(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;thread(void)&nbsp;--&gt;&nbsp;QThread&quot;,&quot;ungetChar(char&nbsp;c)&nbsp;--&gt;&nbsp;void&quot;,&quot;waitForBytesWritten(int&nbsp;msecs)&nbsp;--&gt;&nbsp;bool&quot;,&quot;waitForConnected(int&nbsp;msecs)&nbsp;--&gt;&nbsp;bool&quot;,&quot;waitForDisconnected(int&nbsp;msecs)&nbsp;--&gt;&nbsp;bool&quot;,&quot;waitForReadyRead(int&nbsp;msecs)&nbsp;--&gt;&nbsp;bool&quot;,&quot;write(char&nbsp;*data,&nbsp;int&nbsp;maxSize)&nbsp;--&gt;&nbsp;int&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2LIST = ["+char(34)+"abort(void) --> void"+char(34)+","+char(34)+"atEnd(void) --> bool"+char(34)+","+char(34)+"bind(QHostAddress address, int port, QAbstractSocket::BindFlag mode) --> bool"+char(34)+","+char(34)+"blockSignals(bool block) --> bool"+char(34)+","+char(34)+"bytesAvailable(void) --> int"+char(34)+","+char(34)+"bytesToWrite(void) --> int"+char(34)+","+char(34)+"canReadLine(void) --> bool"+char(34)+","+char(34)+"children(void) --> QObjectList"+char(34)+","+char(34)+"close(void) --> void"+char(34)+","+char(34)+"connectToHost(QString hostName, int port, QIODevice::OpenModeFlag openMode, QAbstractSocket::NetworkLayerProtocol protocol) --> void"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"deleteLater(void) --> void"+char(34)+","+char(34)+"disconnectFromHost(void) --> void"+char(34)+","+char(34)+"dumpObjectInfo(void) --> void"+char(34)+","+char(34)+"dumpObjectTree(void) --> void"+char(34)+","+char(34)+"error(void) --> int"+char(34)+","+char(34)+"errorString(void) --> QString"+char(34)+","+char(34)+"flush(void) --> bool"+char(34)+","+char(34)+"getaboutToCloseEvent(void) --> char"+char(34)+","+char(34)+"getbytesWrittenEvent(void) --> char"+char(34)+","+char(34)+"getChar(char *c) --> bool"+char(34)+","+char(34)+"getconnectedEvent(void) --> char"+char(34)+","+char(34)+"getdisconnectedEvent(void) --> char"+char(34)+","+char(34)+"geterrorEvent(void) --> char"+char(34)+","+char(34)+"gethostFoundEvent(void) --> char"+char(34)+","+char(34)+"getproxyAuthenticationRequiredEvent(void) --> char"+char(34)+","+char(34)+"getreadChannelFinishedEvent(void) --> char"+char(34)+","+char(34)+"getreadyReadEvent(void) --> char"+char(34)+","+char(34)+"getstateChangedEvent(void) --> char"+char(34)+","+char(34)+"inherits(char *className) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"installEventFilter(QObject *filterObj) --> void"+char(34)+","+char(34)+"isOpen(void) --> bool"+char(34)+","+char(34)+"isReadable(void) --> bool"+char(34)+","+char(34)+"isSequential(void) --> bool"+char(34)+","+char(34)+"isTextModeEnabled(void) --> bool"+char(34)+","+char(34)+"isValid(void) --> bool"+char(34)+","+char(34)+"isWidgetType(void) --> bool"+char(34)+","+char(34)+"isWritable(void) --> bool"+char(34)+","+char(34)+"killTimer(int id) --> void"+char(34)+","+char(34)+"localAddress(void) --> QHostAddress"+char(34)+","+char(34)+"localPort(void) --> int"+char(34)+","+char(34)+"moveToThread(QThread *targetThread) --> void"+char(34)+","+char(34)+"objectName(void) --> QString"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"open(QIODevice::OpenMode flags) --> bool"+char(34)+","+char(34)+"openMode(void) --> int"+char(34)+","+char(34)+"parent(void) --> QObject"+char(34)+","+char(34)+"pauseMode(void) --> int"+char(34)+","+char(34)+"peek(char *data, int maxSize) --> int"+char(34)+","+char(34)+"peerAddress(void) --> QHostAddress"+char(34)+","+char(34)+"peerName(void) --> QString"+char(34)+","+char(34)+"peerPort(void) --> int"+char(34)+","+char(34)+"pos(void) --> qint64"+char(34)+","+char(34)+"property(char *name) --> QVariant"+char(34)+","+char(34)+"proxy(void) --> QNetworkProxy"+char(34)+","+char(34)+"putChar(char c) --> bool"+char(34)+","+char(34)+"read(char *data, int maxSize) --> int"+char(34)+","+char(34)+"readAll(void) --> QByteArray"+char(34)+","+char(34)+"readBufferSize(void) --> int"+char(34)+","+char(34)+"readLine(char *data, int maxSize) --> int"+char(34)+","+char(34)+"removeEventFilter(QObject *obj) --> void"+char(34)+","+char(34)+"resume(void) --> void"+char(34)+","+char(34)+"seek(qint64 pos) --> bool"+char(34)+","+char(34)+"setaboutToCloseEvent(char *) --> void"+char(34)+","+char(34)+"setbytesWrittenEvent(char *) --> void"+char(34)+","+char(34)+"setconnectedEvent(char *) --> void"+char(34)+","+char(34)+"setdisconnectedEvent(char *) --> void"+char(34)+","+char(34)+"seterrorEvent(char *) --> void"+char(34)+","+char(34)+"sethostFoundEvent(char *) --> void"+char(34)+","+char(34)+"setObjectName(QString) --> void"+char(34)+","+char(34)+"setParent(QObject *parent) --> void"+char(34)+","+char(34)+"setPauseMode(QAbstractSocket::PauseMode pauseMode) --> void"+char(34)+","+char(34)+"setProperty(char *name, QVariant) --> bool"+char(34)+","+char(34)+"setProperty_2(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_3(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_4(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_5(char *name, QString) --> bool"+char(34)+","+char(34)+"setProperty_double(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_float(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_int(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_string(char *name, QString) --> bool"+char(34)+","+char(34)+"setProxy(QNetworkProxy networkProxy) --> void"+char(34)+","+char(34)+"setproxyAuthenticationRequiredEvent(char *) --> void"+char(34)+","+char(34)+"setReadBufferSize(int size) --> void"+char(34)+","+char(34)+"setreadChannelFinishedEvent(char *) --> void"+char(34)+","+char(34)+"setreadyReadEvent(char *) --> void"+char(34)+","+char(34)+"setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenModeFlag openMode) --> bool"+char(34)+","+char(34)+"setSocketOption(QAbstractSocket::SocketOption option, QVariant value) --> void"+char(34)+","+char(34)+"setstateChangedEvent(char *) --> void"+char(34)+","+char(34)+"setTextModeEnabled(bool enabled) --> void"+char(34)+","+char(34)+"signalsBlocked(void) --> bool"+char(34)+","+char(34)+"size(void) --> qint64"+char(34)+","+char(34)+"socketDescriptor(void) --> int"+char(34)+","+char(34)+"socketOption(QAbstractSocket::SocketOption option) --> QVariant"+char(34)+","+char(34)+"socketType(void) --> int"+char(34)+","+char(34)+"startTimer(int interval) --> int"+char(34)+","+char(34)+"state(void) --> int"+char(34)+","+char(34)+"thread(void) --> QThread"+char(34)+","+char(34)+"ungetChar(char c) --> void"+char(34)+","+char(34)+"waitForBytesWritten(int msecs) --> bool"+char(34)+","+char(34)+"waitForConnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForDisconnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForReadyRead(int msecs) --> bool"+char(34)+","+char(34)+"write(char *data, int maxSize) --> int"+char(34)+"]"
			],
			[
				"interactionid",
				11
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2LIST = ["+char(34)+"abort(void) --> void"+char(34)+","+char(34)+"atEnd(void) --> bool"+char(34)+","+char(34)+"bind(QHostAddress address, int port, QAbstractSocket::BindFlag mode) --> bool"+char(34)+","+char(34)+"blockSignals(bool block) --> bool"+char(34)+","+char(34)+"bytesAvailable(void) --> int"+char(34)+","+char(34)+"bytesToWrite(void) --> int"+char(34)+","+char(34)+"canReadLine(void) --> bool"+char(34)+","+char(34)+"children(void) --> QObjectList"+char(34)+","+char(34)+"close(void) --> void"+char(34)+","+char(34)+"connectToHost(QString hostName, int port, QIODevice::OpenModeFlag openMode, QAbstractSocket::NetworkLayerProtocol protocol) --> void"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"deleteLater(void) --> void"+char(34)+","+char(34)+"disconnectFromHost(void) --> void"+char(34)+","+char(34)+"dumpObjectInfo(void) --> void"+char(34)+","+char(34)+"dumpObjectTree(void) --> void"+char(34)+","+char(34)+"error(void) --> int"+char(34)+","+char(34)+"errorString(void) --> QString"+char(34)+","+char(34)+"flush(void) --> bool"+char(34)+","+char(34)+"getaboutToCloseEvent(void) --> char"+char(34)+","+char(34)+"getbytesWrittenEvent(void) --> char"+char(34)+","+char(34)+"getChar(char *c) --> bool"+char(34)+","+char(34)+"getconnectedEvent(void) --> char"+char(34)+","+char(34)+"getdisconnectedEvent(void) --> char"+char(34)+","+char(34)+"geterrorEvent(void) --> char"+char(34)+","+char(34)+"gethostFoundEvent(void) --> char"+char(34)+","+char(34)+"getproxyAuthenticationRequiredEvent(void) --> char"+char(34)+","+char(34)+"getreadChannelFinishedEvent(void) --> char"+char(34)+","+char(34)+"getreadyReadEvent(void) --> char"+char(34)+","+char(34)+"getstateChangedEvent(void) --> char"+char(34)+","+char(34)+"inherits(char *className) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"installEventFilter(QObject *filterObj) --> void"+char(34)+","+char(34)+"isOpen(void) --> bool"+char(34)+","+char(34)+"isReadable(void) --> bool"+char(34)+","+char(34)+"isSequential(void) --> bool"+char(34)+","+char(34)+"isTextModeEnabled(void) --> bool"+char(34)+","+char(34)+"isValid(void) --> bool"+char(34)+","+char(34)+"isWidgetType(void) --> bool"+char(34)+","+char(34)+"isWritable(void) --> bool"+char(34)+","+char(34)+"killTimer(int id) --> void"+char(34)+","+char(34)+"localAddress(void) --> QHostAddress"+char(34)+","+char(34)+"localPort(void) --> int"+char(34)+","+char(34)+"moveToThread(QThread *targetThread) --> void"+char(34)+","+char(34)+"objectName(void) --> QString"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"open(QIODevice::OpenMode flags) --> bool"+char(34)+","+char(34)+"openMode(void) --> int"+char(34)+","+char(34)+"parent(void) --> QObject"+char(34)+","+char(34)+"pauseMode(void) --> int"+char(34)+","+char(34)+"peek(char *data, int maxSize) --> int"+char(34)+","+char(34)+"peerAddress(void) --> QHostAddress"+char(34)+","+char(34)+"peerName(void) --> QString"+char(34)+","+char(34)+"peerPort(void) --> int"+char(34)+","+char(34)+"pos(void) --> qint64"+char(34)+","+char(34)+"property(char *name) --> QVariant"+char(34)+","+char(34)+"proxy(void) --> QNetworkProxy"+char(34)+","+char(34)+"putChar(char c) --> bool"+char(34)+","+char(34)+"read(char *data, int maxSize) --> int"+char(34)+","+char(34)+"readAll(void) --> QByteArray"+char(34)+","+char(34)+"readBufferSize(void) --> int"+char(34)+","+char(34)+"readLine(char *data, int maxSize) --> int"+char(34)+","+char(34)+"removeEventFilter(QObject *obj) --> void"+char(34)+","+char(34)+"resume(void) --> void"+char(34)+","+char(34)+"seek(qint64 pos) --> bool"+char(34)+","+char(34)+"setaboutToCloseEvent(char *) --> void"+char(34)+","+char(34)+"setbytesWrittenEvent(char *) --> void"+char(34)+","+char(34)+"setconnectedEvent(char *) --> void"+char(34)+","+char(34)+"setdisconnectedEvent(char *) --> void"+char(34)+","+char(34)+"seterrorEvent(char *) --> void"+char(34)+","+char(34)+"sethostFoundEvent(char *) --> void"+char(34)+","+char(34)+"setObjectName(QString) --> void"+char(34)+","+char(34)+"setParent(QObject *parent) --> void"+char(34)+","+char(34)+"setPauseMode(QAbstractSocket::PauseMode pauseMode) --> void"+char(34)+","+char(34)+"setProperty(char *name, QVariant) --> bool"+char(34)+","+char(34)+"setProperty_2(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_3(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_4(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_5(char *name, QString) --> bool"+char(34)+","+char(34)+"setProperty_double(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_float(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_int(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_string(char *name, QString) --> bool"+char(34)+","+char(34)+"setProxy(QNetworkProxy networkProxy) --> void"+char(34)+","+char(34)+"setproxyAuthenticationRequiredEvent(char *) --> void"+char(34)+","+char(34)+"setReadBufferSize(int size) --> void"+char(34)+","+char(34)+"setreadChannelFinishedEvent(char *) --> void"+char(34)+","+char(34)+"setreadyReadEvent(char *) --> void"+char(34)+","+char(34)+"setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenModeFlag openMode) --> bool"+char(34)+","+char(34)+"setSocketOption(QAbstractSocket::SocketOption option, QVariant value) --> void"+char(34)+","+char(34)+"setstateChangedEvent(char *) --> void"+char(34)+","+char(34)+"setTextModeEnabled(bool enabled) --> void"+char(34)+","+char(34)+"signalsBlocked(void) --> bool"+char(34)+","+char(34)+"size(void) --> qint64"+char(34)+","+char(34)+"socketDescriptor(void) --> int"+char(34)+","+char(34)+"socketOption(QAbstractSocket::SocketOption option) --> QVariant"+char(34)+","+char(34)+"socketType(void) --> int"+char(34)+","+char(34)+"startTimer(int interval) --> int"+char(34)+","+char(34)+"state(void) --> int"+char(34)+","+char(34)+"thread(void) --> QThread"+char(34)+","+char(34)+"ungetChar(char c) --> void"+char(34)+","+char(34)+"waitForBytesWritten(int msecs) --> bool"+char(34)+","+char(34)+"waitForConnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForDisconnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForReadyRead(int msecs) --> bool"+char(34)+","+char(34)+"write(char *data, int maxSize) --> int"+char(34)+"]"
			]
		]
	],
	[
		12,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE3</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Parameters&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE3 = "+char(34)+"Parameters"+char(34)+""
			],
			[
				"interactionid",
				12
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE3 = "+char(34)+"Parameters"+char(34)+""
			]
		]
	],
	[
		13,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE4</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Output&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE4 = "+char(34)+"Output"+char(34)+""
			],
			[
				"interactionid",
				13
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE4 = "+char(34)+"Output"+char(34)+""
			]
		]
	],
	[
		14,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;abort&quot;,&quot;atend&quot;,&quot;bind&quot;,&quot;blocksignals&quot;,&quot;bytesavailable&quot;,&quot;bytestowrite&quot;,&quot;canreadline&quot;,&quot;children&quot;,&quot;close&quot;,&quot;connecttohost&quot;,&quot;delete&quot;,&quot;deletelater&quot;,&quot;disconnectfromhost&quot;,&quot;dumpobjectinfo&quot;,&quot;dumpobjecttree&quot;,&quot;error&quot;,&quot;errorstring&quot;,&quot;flush&quot;,&quot;getabouttocloseevent&quot;,&quot;getbyteswrittenevent&quot;,&quot;getchar&quot;,&quot;getconnectedevent&quot;,&quot;getdisconnectedevent&quot;,&quot;geterrorevent&quot;,&quot;gethostfoundevent&quot;,&quot;getproxyauthenticationrequiredevent&quot;,&quot;getreadchannelfinishedevent&quot;,&quot;getreadyreadevent&quot;,&quot;getstatechangedevent&quot;,&quot;inherits&quot;,&quot;init&quot;,&quot;installeventfilter&quot;,&quot;isopen&quot;,&quot;isreadable&quot;,&quot;issequential&quot;,&quot;istextmodeenabled&quot;,&quot;isvalid&quot;,&quot;iswidgettype&quot;,&quot;iswritable&quot;,&quot;killtimer&quot;,&quot;localaddress&quot;,&quot;localport&quot;,&quot;movetothread&quot;,&quot;objectname&quot;,&quot;objectpointer&quot;,&quot;open&quot;,&quot;openmode&quot;,&quot;parent&quot;,&quot;pausemode&quot;,&quot;peek&quot;,&quot;peeraddress&quot;,&quot;peername&quot;,&quot;peerport&quot;,&quot;pos&quot;,&quot;property&quot;,&quot;proxy&quot;,&quot;putchar&quot;,&quot;read&quot;,&quot;readall&quot;,&quot;readbuffersize&quot;,&quot;readline&quot;,&quot;removeeventfilter&quot;,&quot;resume&quot;,&quot;seek&quot;,&quot;setabouttocloseevent&quot;,&quot;setbyteswrittenevent&quot;,&quot;setconnectedevent&quot;,&quot;setdisconnectedevent&quot;,&quot;seterrorevent&quot;,&quot;sethostfoundevent&quot;,&quot;setobjectname&quot;,&quot;setparent&quot;,&quot;setpausemode&quot;,&quot;setproperty&quot;,&quot;setproperty_2&quot;,&quot;setproperty_3&quot;,&quot;setproperty_4&quot;,&quot;setproperty_5&quot;,&quot;setproperty_double&quot;,&quot;setproperty_float&quot;,&quot;setproperty_int&quot;,&quot;setproperty_string&quot;,&quot;setproxy&quot;,&quot;setproxyauthenticationrequiredevent&quot;,&quot;setreadbuffersize&quot;,&quot;setreadchannelfinishedevent&quot;,&quot;setreadyreadevent&quot;,&quot;setsocketdescriptor&quot;,&quot;setsocketoption&quot;,&quot;setstatechangedevent&quot;,&quot;settextmodeenabled&quot;,&quot;signalsblocked&quot;,&quot;size&quot;,&quot;socketdescriptor&quot;,&quot;socketoption&quot;,&quot;sockettype&quot;,&quot;starttimer&quot;,&quot;state&quot;,&quot;thread&quot;,&quot;ungetchar&quot;,&quot;waitforbyteswritten&quot;,&quot;waitforconnected&quot;,&quot;waitfordisconnected&quot;,&quot;waitforreadyread&quot;,&quot;write&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC = ["+char(34)+"abort"+char(34)+","+char(34)+"atend"+char(34)+","+char(34)+"bind"+char(34)+","+char(34)+"blocksignals"+char(34)+","+char(34)+"bytesavailable"+char(34)+","+char(34)+"bytestowrite"+char(34)+","+char(34)+"canreadline"+char(34)+","+char(34)+"children"+char(34)+","+char(34)+"close"+char(34)+","+char(34)+"connecttohost"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"deletelater"+char(34)+","+char(34)+"disconnectfromhost"+char(34)+","+char(34)+"dumpobjectinfo"+char(34)+","+char(34)+"dumpobjecttree"+char(34)+","+char(34)+"error"+char(34)+","+char(34)+"errorstring"+char(34)+","+char(34)+"flush"+char(34)+","+char(34)+"getabouttocloseevent"+char(34)+","+char(34)+"getbyteswrittenevent"+char(34)+","+char(34)+"getchar"+char(34)+","+char(34)+"getconnectedevent"+char(34)+","+char(34)+"getdisconnectedevent"+char(34)+","+char(34)+"geterrorevent"+char(34)+","+char(34)+"gethostfoundevent"+char(34)+","+char(34)+"getproxyauthenticationrequiredevent"+char(34)+","+char(34)+"getreadchannelfinishedevent"+char(34)+","+char(34)+"getreadyreadevent"+char(34)+","+char(34)+"getstatechangedevent"+char(34)+","+char(34)+"inherits"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"installeventfilter"+char(34)+","+char(34)+"isopen"+char(34)+","+char(34)+"isreadable"+char(34)+","+char(34)+"issequential"+char(34)+","+char(34)+"istextmodeenabled"+char(34)+","+char(34)+"isvalid"+char(34)+","+char(34)+"iswidgettype"+char(34)+","+char(34)+"iswritable"+char(34)+","+char(34)+"killtimer"+char(34)+","+char(34)+"localaddress"+char(34)+","+char(34)+"localport"+char(34)+","+char(34)+"movetothread"+char(34)+","+char(34)+"objectname"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"open"+char(34)+","+char(34)+"openmode"+char(34)+","+char(34)+"parent"+char(34)+","+char(34)+"pausemode"+char(34)+","+char(34)+"peek"+char(34)+","+char(34)+"peeraddress"+char(34)+","+char(34)+"peername"+char(34)+","+char(34)+"peerport"+char(34)+","+char(34)+"pos"+char(34)+","+char(34)+"property"+char(34)+","+char(34)+"proxy"+char(34)+","+char(34)+"putchar"+char(34)+","+char(34)+"read"+char(34)+","+char(34)+"readall"+char(34)+","+char(34)+"readbuffersize"+char(34)+","+char(34)+"readline"+char(34)+","+char(34)+"removeeventfilter"+char(34)+","+char(34)+"resume"+char(34)+","+char(34)+"seek"+char(34)+","+char(34)+"setabouttocloseevent"+char(34)+","+char(34)+"setbyteswrittenevent"+char(34)+","+char(34)+"setconnectedevent"+char(34)+","+char(34)+"setdisconnectedevent"+char(34)+","+char(34)+"seterrorevent"+char(34)+","+char(34)+"sethostfoundevent"+char(34)+","+char(34)+"setobjectname"+char(34)+","+char(34)+"setparent"+char(34)+","+char(34)+"setpausemode"+char(34)+","+char(34)+"setproperty"+char(34)+","+char(34)+"setproperty_2"+char(34)+","+char(34)+"setproperty_3"+char(34)+","+char(34)+"setproperty_4"+char(34)+","+char(34)+"setproperty_5"+char(34)+","+char(34)+"setproperty_double"+char(34)+","+char(34)+"setproperty_float"+char(34)+","+char(34)+"setproperty_int"+char(34)+","+char(34)+"setproperty_string"+char(34)+","+char(34)+"setproxy"+char(34)+","+char(34)+"setproxyauthenticationrequiredevent"+char(34)+","+char(34)+"setreadbuffersize"+char(34)+","+char(34)+"setreadchannelfinishedevent"+char(34)+","+char(34)+"setreadyreadevent"+char(34)+","+char(34)+"setsocketdescriptor"+char(34)+","+char(34)+"setsocketoption"+char(34)+","+char(34)+"setstatechangedevent"+char(34)+","+char(34)+"settextmodeenabled"+char(34)+","+char(34)+"signalsblocked"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"socketdescriptor"+char(34)+","+char(34)+"socketoption"+char(34)+","+char(34)+"sockettype"+char(34)+","+char(34)+"starttimer"+char(34)+","+char(34)+"state"+char(34)+","+char(34)+"thread"+char(34)+","+char(34)+"ungetchar"+char(34)+","+char(34)+"waitforbyteswritten"+char(34)+","+char(34)+"waitforconnected"+char(34)+","+char(34)+"waitfordisconnected"+char(34)+","+char(34)+"waitforreadyread"+char(34)+","+char(34)+"write"+char(34)+"]"
			],
			[
				"interactionid",
				14
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC = ["+char(34)+"abort"+char(34)+","+char(34)+"atend"+char(34)+","+char(34)+"bind"+char(34)+","+char(34)+"blocksignals"+char(34)+","+char(34)+"bytesavailable"+char(34)+","+char(34)+"bytestowrite"+char(34)+","+char(34)+"canreadline"+char(34)+","+char(34)+"children"+char(34)+","+char(34)+"close"+char(34)+","+char(34)+"connecttohost"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"deletelater"+char(34)+","+char(34)+"disconnectfromhost"+char(34)+","+char(34)+"dumpobjectinfo"+char(34)+","+char(34)+"dumpobjecttree"+char(34)+","+char(34)+"error"+char(34)+","+char(34)+"errorstring"+char(34)+","+char(34)+"flush"+char(34)+","+char(34)+"getabouttocloseevent"+char(34)+","+char(34)+"getbyteswrittenevent"+char(34)+","+char(34)+"getchar"+char(34)+","+char(34)+"getconnectedevent"+char(34)+","+char(34)+"getdisconnectedevent"+char(34)+","+char(34)+"geterrorevent"+char(34)+","+char(34)+"gethostfoundevent"+char(34)+","+char(34)+"getproxyauthenticationrequiredevent"+char(34)+","+char(34)+"getreadchannelfinishedevent"+char(34)+","+char(34)+"getreadyreadevent"+char(34)+","+char(34)+"getstatechangedevent"+char(34)+","+char(34)+"inherits"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"installeventfilter"+char(34)+","+char(34)+"isopen"+char(34)+","+char(34)+"isreadable"+char(34)+","+char(34)+"issequential"+char(34)+","+char(34)+"istextmodeenabled"+char(34)+","+char(34)+"isvalid"+char(34)+","+char(34)+"iswidgettype"+char(34)+","+char(34)+"iswritable"+char(34)+","+char(34)+"killtimer"+char(34)+","+char(34)+"localaddress"+char(34)+","+char(34)+"localport"+char(34)+","+char(34)+"movetothread"+char(34)+","+char(34)+"objectname"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"open"+char(34)+","+char(34)+"openmode"+char(34)+","+char(34)+"parent"+char(34)+","+char(34)+"pausemode"+char(34)+","+char(34)+"peek"+char(34)+","+char(34)+"peeraddress"+char(34)+","+char(34)+"peername"+char(34)+","+char(34)+"peerport"+char(34)+","+char(34)+"pos"+char(34)+","+char(34)+"property"+char(34)+","+char(34)+"proxy"+char(34)+","+char(34)+"putchar"+char(34)+","+char(34)+"read"+char(34)+","+char(34)+"readall"+char(34)+","+char(34)+"readbuffersize"+char(34)+","+char(34)+"readline"+char(34)+","+char(34)+"removeeventfilter"+char(34)+","+char(34)+"resume"+char(34)+","+char(34)+"seek"+char(34)+","+char(34)+"setabouttocloseevent"+char(34)+","+char(34)+"setbyteswrittenevent"+char(34)+","+char(34)+"setconnectedevent"+char(34)+","+char(34)+"setdisconnectedevent"+char(34)+","+char(34)+"seterrorevent"+char(34)+","+char(34)+"sethostfoundevent"+char(34)+","+char(34)+"setobjectname"+char(34)+","+char(34)+"setparent"+char(34)+","+char(34)+"setpausemode"+char(34)+","+char(34)+"setproperty"+char(34)+","+char(34)+"setproperty_2"+char(34)+","+char(34)+"setproperty_3"+char(34)+","+char(34)+"setproperty_4"+char(34)+","+char(34)+"setproperty_5"+char(34)+","+char(34)+"setproperty_double"+char(34)+","+char(34)+"setproperty_float"+char(34)+","+char(34)+"setproperty_int"+char(34)+","+char(34)+"setproperty_string"+char(34)+","+char(34)+"setproxy"+char(34)+","+char(34)+"setproxyauthenticationrequiredevent"+char(34)+","+char(34)+"setreadbuffersize"+char(34)+","+char(34)+"setreadchannelfinishedevent"+char(34)+","+char(34)+"setreadyreadevent"+char(34)+","+char(34)+"setsocketdescriptor"+char(34)+","+char(34)+"setsocketoption"+char(34)+","+char(34)+"setstatechangedevent"+char(34)+","+char(34)+"settextmodeenabled"+char(34)+","+char(34)+"signalsblocked"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"socketdescriptor"+char(34)+","+char(34)+"socketoption"+char(34)+","+char(34)+"sockettype"+char(34)+","+char(34)+"starttimer"+char(34)+","+char(34)+"state"+char(34)+","+char(34)+"thread"+char(34)+","+char(34)+"ungetchar"+char(34)+","+char(34)+"waitforbyteswritten"+char(34)+","+char(34)+"waitforconnected"+char(34)+","+char(34)+"waitfordisconnected"+char(34)+","+char(34)+"waitforreadyread"+char(34)+","+char(34)+"write"+char(34)+"]"
			]
		]
	],
	[
		15,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE2STEPFUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2STEPFUNC = T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC"
			],
			[
				"interactionid",
				15
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QTCPSOCKETCLASS_IP_VALUE2STEPFUNC = T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC"
			]
		]
	]
]

aInteractionsTable = [
	[
		1,
		1,
		"",
		"02/05/2025",
		"06:16:59",
		""
	],
	[
		2,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;/*;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		3,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;**	Project : Programming Without Coding Technology (PWCT) Version 2.0;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		4,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;**	File Purpose :  qtcpsocketclass Component;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		5,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;**	Date : 2021.08.09;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		6,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		7,
		1,
		"comment_text",
		"02/05/2025",
		"06:16:59",
		"value;;_RV_;;*/;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		8,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_TITLE;;_RV_;;rightside;;_RV_;;"+char(34)+"QTcpSocket Class Component"+char(34)+";;_RV_;;"
	],
	[
		9,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE;;_RV_;;rightside;;_RV_;;"+char(34)+"Object"+char(34)+";;_RV_;;"
	],
	[
		10,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE2;;_RV_;;rightside;;_RV_;;"+char(34)+"Method"+char(34)+";;_RV_;;"
	],
	[
		11,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE2LIST;;_RV_;;rightside;;_RV_;;["+char(34)+"abort(void) --> void"+char(34)+","+char(34)+"atEnd(void) --> bool"+char(34)+","+char(34)+"bind(QHostAddress address, int port, QAbstractSocket::BindFlag mode) --> bool"+char(34)+","+char(34)+"blockSignals(bool block) --> bool"+char(34)+","+char(34)+"bytesAvailable(void) --> int"+char(34)+","+char(34)+"bytesToWrite(void) --> int"+char(34)+","+char(34)+"canReadLine(void) --> bool"+char(34)+","+char(34)+"children(void) --> QObjectList"+char(34)+","+char(34)+"close(void) --> void"+char(34)+","+char(34)+"connectToHost(QString hostName, int port, QIODevice::OpenModeFlag openMode, QAbstractSocket::NetworkLayerProtocol protocol) --> void"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"deleteLater(void) --> void"+char(34)+","+char(34)+"disconnectFromHost(void) --> void"+char(34)+","+char(34)+"dumpObjectInfo(void) --> void"+char(34)+","+char(34)+"dumpObjectTree(void) --> void"+char(34)+","+char(34)+"error(void) --> int"+char(34)+","+char(34)+"errorString(void) --> QString"+char(34)+","+char(34)+"flush(void) --> bool"+char(34)+","+char(34)+"getaboutToCloseEvent(void) --> char"+char(34)+","+char(34)+"getbytesWrittenEvent(void) --> char"+char(34)+","+char(34)+"getChar(char *c) --> bool"+char(34)+","+char(34)+"getconnectedEvent(void) --> char"+char(34)+","+char(34)+"getdisconnectedEvent(void) --> char"+char(34)+","+char(34)+"geterrorEvent(void) --> char"+char(34)+","+char(34)+"gethostFoundEvent(void) --> char"+char(34)+","+char(34)+"getproxyAuthenticationRequiredEvent(void) --> char"+char(34)+","+char(34)+"getreadChannelFinishedEvent(void) --> char"+char(34)+","+char(34)+"getreadyReadEvent(void) --> char"+char(34)+","+char(34)+"getstateChangedEvent(void) --> char"+char(34)+","+char(34)+"inherits(char *className) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"installEventFilter(QObject *filterObj) --> void"+char(34)+","+char(34)+"isOpen(void) --> bool"+char(34)+","+char(34)+"isReadable(void) --> bool"+char(34)+","+char(34)+"isSequential(void) --> bool"+char(34)+","+char(34)+"isTextModeEnabled(void) --> bool"+char(34)+","+char(34)+"isValid(void) --> bool"+char(34)+","+char(34)+"isWidgetType(void) --> bool"+char(34)+","+char(34)+"isWritable(void) --> bool"+char(34)+","+char(34)+"killTimer(int id) --> void"+char(34)+","+char(34)+"localAddress(void) --> QHostAddress"+char(34)+","+char(34)+"localPort(void) --> int"+char(34)+","+char(34)+"moveToThread(QThread *targetThread) --> void"+char(34)+","+char(34)+"objectName(void) --> QString"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"open(QIODevice::OpenMode flags) --> bool"+char(34)+","+char(34)+"openMode(void) --> int"+char(34)+","+char(34)+"parent(void) --> QObject"+char(34)+","+char(34)+"pauseMode(void) --> int"+char(34)+","+char(34)+"peek(char *data, int maxSize) --> int"+char(34)+","+char(34)+"peerAddress(void) --> QHostAddress"+char(34)+","+char(34)+"peerName(void) --> QString"+char(34)+","+char(34)+"peerPort(void) --> int"+char(34)+","+char(34)+"pos(void) --> qint64"+char(34)+","+char(34)+"property(char *name) --> QVariant"+char(34)+","+char(34)+"proxy(void) --> QNetworkProxy"+char(34)+","+char(34)+"putChar(char c) --> bool"+char(34)+","+char(34)+"read(char *data, int maxSize) --> int"+char(34)+","+char(34)+"readAll(void) --> QByteArray"+char(34)+","+char(34)+"readBufferSize(void) --> int"+char(34)+","+char(34)+"readLine(char *data, int maxSize) --> int"+char(34)+","+char(34)+"removeEventFilter(QObject *obj) --> void"+char(34)+","+char(34)+"resume(void) --> void"+char(34)+","+char(34)+"seek(qint64 pos) --> bool"+char(34)+","+char(34)+"setaboutToCloseEvent(char *) --> void"+char(34)+","+char(34)+"setbytesWrittenEvent(char *) --> void"+char(34)+","+char(34)+"setconnectedEvent(char *) --> void"+char(34)+","+char(34)+"setdisconnectedEvent(char *) --> void"+char(34)+","+char(34)+"seterrorEvent(char *) --> void"+char(34)+","+char(34)+"sethostFoundEvent(char *) --> void"+char(34)+","+char(34)+"setObjectName(QString) --> void"+char(34)+","+char(34)+"setParent(QObject *parent) --> void"+char(34)+","+char(34)+"setPauseMode(QAbstractSocket::PauseMode pauseMode) --> void"+char(34)+","+char(34)+"setProperty(char *name, QVariant) --> bool"+char(34)+","+char(34)+"setProperty_2(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_3(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_4(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_5(char *name, QString) --> bool"+char(34)+","+char(34)+"setProperty_double(char *name, double) --> bool"+char(34)+","+char(34)+"setProperty_float(char *name, float) --> bool"+char(34)+","+char(34)+"setProperty_int(char *name, int) --> bool"+char(34)+","+char(34)+"setProperty_string(char *name, QString) --> bool"+char(34)+","+char(34)+"setProxy(QNetworkProxy networkProxy) --> void"+char(34)+","+char(34)+"setproxyAuthenticationRequiredEvent(char *) --> void"+char(34)+","+char(34)+"setReadBufferSize(int size) --> void"+char(34)+","+char(34)+"setreadChannelFinishedEvent(char *) --> void"+char(34)+","+char(34)+"setreadyReadEvent(char *) --> void"+char(34)+","+char(34)+"setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenModeFlag openMode) --> bool"+char(34)+","+char(34)+"setSocketOption(QAbstractSocket::SocketOption option, QVariant value) --> void"+char(34)+","+char(34)+"setstateChangedEvent(char *) --> void"+char(34)+","+char(34)+"setTextModeEnabled(bool enabled) --> void"+char(34)+","+char(34)+"signalsBlocked(void) --> bool"+char(34)+","+char(34)+"size(void) --> qint64"+char(34)+","+char(34)+"socketDescriptor(void) --> int"+char(34)+","+char(34)+"socketOption(QAbstractSocket::SocketOption option) --> QVariant"+char(34)+","+char(34)+"socketType(void) --> int"+char(34)+","+char(34)+"startTimer(int interval) --> int"+char(34)+","+char(34)+"state(void) --> int"+char(34)+","+char(34)+"thread(void) --> QThread"+char(34)+","+char(34)+"ungetChar(char c) --> void"+char(34)+","+char(34)+"waitForBytesWritten(int msecs) --> bool"+char(34)+","+char(34)+"waitForConnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForDisconnected(int msecs) --> bool"+char(34)+","+char(34)+"waitForReadyRead(int msecs) --> bool"+char(34)+","+char(34)+"write(char *data, int maxSize) --> int"+char(34)+"];;_RV_;;"
	],
	[
		12,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE3;;_RV_;;rightside;;_RV_;;"+char(34)+"Parameters"+char(34)+";;_RV_;;"
	],
	[
		13,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE4;;_RV_;;rightside;;_RV_;;"+char(34)+"Output"+char(34)+";;_RV_;;"
	],
	[
		14,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC;;_RV_;;rightside;;_RV_;;["+char(34)+"abort"+char(34)+","+char(34)+"atend"+char(34)+","+char(34)+"bind"+char(34)+","+char(34)+"blocksignals"+char(34)+","+char(34)+"bytesavailable"+char(34)+","+char(34)+"bytestowrite"+char(34)+","+char(34)+"canreadline"+char(34)+","+char(34)+"children"+char(34)+","+char(34)+"close"+char(34)+","+char(34)+"connecttohost"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"deletelater"+char(34)+","+char(34)+"disconnectfromhost"+char(34)+","+char(34)+"dumpobjectinfo"+char(34)+","+char(34)+"dumpobjecttree"+char(34)+","+char(34)+"error"+char(34)+","+char(34)+"errorstring"+char(34)+","+char(34)+"flush"+char(34)+","+char(34)+"getabouttocloseevent"+char(34)+","+char(34)+"getbyteswrittenevent"+char(34)+","+char(34)+"getchar"+char(34)+","+char(34)+"getconnectedevent"+char(34)+","+char(34)+"getdisconnectedevent"+char(34)+","+char(34)+"geterrorevent"+char(34)+","+char(34)+"gethostfoundevent"+char(34)+","+char(34)+"getproxyauthenticationrequiredevent"+char(34)+","+char(34)+"getreadchannelfinishedevent"+char(34)+","+char(34)+"getreadyreadevent"+char(34)+","+char(34)+"getstatechangedevent"+char(34)+","+char(34)+"inherits"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"installeventfilter"+char(34)+","+char(34)+"isopen"+char(34)+","+char(34)+"isreadable"+char(34)+","+char(34)+"issequential"+char(34)+","+char(34)+"istextmodeenabled"+char(34)+","+char(34)+"isvalid"+char(34)+","+char(34)+"iswidgettype"+char(34)+","+char(34)+"iswritable"+char(34)+","+char(34)+"killtimer"+char(34)+","+char(34)+"localaddress"+char(34)+","+char(34)+"localport"+char(34)+","+char(34)+"movetothread"+char(34)+","+char(34)+"objectname"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"open"+char(34)+","+char(34)+"openmode"+char(34)+","+char(34)+"parent"+char(34)+","+char(34)+"pausemode"+char(34)+","+char(34)+"peek"+char(34)+","+char(34)+"peeraddress"+char(34)+","+char(34)+"peername"+char(34)+","+char(34)+"peerport"+char(34)+","+char(34)+"pos"+char(34)+","+char(34)+"property"+char(34)+","+char(34)+"proxy"+char(34)+","+char(34)+"putchar"+char(34)+","+char(34)+"read"+char(34)+","+char(34)+"readall"+char(34)+","+char(34)+"readbuffersize"+char(34)+","+char(34)+"readline"+char(34)+","+char(34)+"removeeventfilter"+char(34)+","+char(34)+"resume"+char(34)+","+char(34)+"seek"+char(34)+","+char(34)+"setabouttocloseevent"+char(34)+","+char(34)+"setbyteswrittenevent"+char(34)+","+char(34)+"setconnectedevent"+char(34)+","+char(34)+"setdisconnectedevent"+char(34)+","+char(34)+"seterrorevent"+char(34)+","+char(34)+"sethostfoundevent"+char(34)+","+char(34)+"setobjectname"+char(34)+","+char(34)+"setparent"+char(34)+","+char(34)+"setpausemode"+char(34)+","+char(34)+"setproperty"+char(34)+","+char(34)+"setproperty_2"+char(34)+","+char(34)+"setproperty_3"+char(34)+","+char(34)+"setproperty_4"+char(34)+","+char(34)+"setproperty_5"+char(34)+","+char(34)+"setproperty_double"+char(34)+","+char(34)+"setproperty_float"+char(34)+","+char(34)+"setproperty_int"+char(34)+","+char(34)+"setproperty_string"+char(34)+","+char(34)+"setproxy"+char(34)+","+char(34)+"setproxyauthenticationrequiredevent"+char(34)+","+char(34)+"setreadbuffersize"+char(34)+","+char(34)+"setreadchannelfinishedevent"+char(34)+","+char(34)+"setreadyreadevent"+char(34)+","+char(34)+"setsocketdescriptor"+char(34)+","+char(34)+"setsocketoption"+char(34)+","+char(34)+"setstatechangedevent"+char(34)+","+char(34)+"settextmodeenabled"+char(34)+","+char(34)+"signalsblocked"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"socketdescriptor"+char(34)+","+char(34)+"socketoption"+char(34)+","+char(34)+"sockettype"+char(34)+","+char(34)+"starttimer"+char(34)+","+char(34)+"state"+char(34)+","+char(34)+"thread"+char(34)+","+char(34)+"ungetchar"+char(34)+","+char(34)+"waitforbyteswritten"+char(34)+","+char(34)+"waitforconnected"+char(34)+","+char(34)+"waitfordisconnected"+char(34)+","+char(34)+"waitforreadyread"+char(34)+","+char(34)+"write"+char(34)+"];;_RV_;;"
	],
	[
		15,
		1,
		"assignment",
		"02/05/2025",
		"06:16:59",
		"leftside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE2STEPFUNC;;_RV_;;rightside;;_RV_;;T_CT_QTCPSOCKETCLASS_IP_VALUE2FUNC;;_RV_;;"
	]
]

# End of Visual Source File