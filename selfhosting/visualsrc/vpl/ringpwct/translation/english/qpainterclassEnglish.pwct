# Visual Source File 

cVisualSourceFileVersion = '1.0.0'
cVisualLanguageName      = 'RingPWCT'
cNaturalLanguageName     = 'english'
nStepsID                 = 15		
nInteractionsID          = 15

aStepsTable = [
	[
		1,
		0,
		[
			[
				"name",
				"Start Point"
			],
			[
				"active",
				1
			],
			[
				"code",
				""
			],
			[
				"interactionid",
				1
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			]
		]
	],
	[
		2,
		1,
		[
			[
				"name",
				"/*"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#/*
"
			],
			[
				"interactionid",
				2
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"/*"
			]
		]
	],
	[
		3,
		1,
		[
			[
				"name",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Project : Programming Without Coding Technology (PWCT) Version 2.0
"
			],
			[
				"interactionid",
				3
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			]
		]
	],
	[
		4,
		1,
		[
			[
				"name",
				"**	File Purpose :  qpainterclass Component"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	File Purpose :  qpainterclass Component
"
			],
			[
				"interactionid",
				4
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	File Purpose :  qpainterclass Component"
			]
		]
	],
	[
		5,
		1,
		[
			[
				"name",
				"**	Date : 2021.08.09"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Date : 2021.08.09
"
			],
			[
				"interactionid",
				5
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Date : 2021.08.09"
			]
		]
	],
	[
		6,
		1,
		[
			[
				"name",
				"**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>
"
			],
			[
				"interactionid",
				6
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Author :  Mahmoud Fayed "
			]
		]
	],
	[
		7,
		1,
		[
			[
				"name",
				"*/"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#*/
"
			],
			[
				"interactionid",
				7
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"*/"
			]
		]
	],
	[
		8,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_TITLE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;QPainter&nbsp;Class&nbsp;Component&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_TITLE = "+char(34)+"QPainter Class Component"+char(34)+""
			],
			[
				"interactionid",
				8
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_TITLE = "+char(34)+"QPainter Class Component"+char(34)+""
			]
		]
	],
	[
		9,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Object&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE = "+char(34)+"Object"+char(34)+""
			],
			[
				"interactionid",
				9
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE = "+char(34)+"Object"+char(34)+""
			]
		]
	],
	[
		10,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE2</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Method&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE2 = "+char(34)+"Method"+char(34)+""
			],
			[
				"interactionid",
				10
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE2 = "+char(34)+"Method"+char(34)+""
			]
		]
	],
	[
		11,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE2FUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;background&quot;,&quot;backgroundmode&quot;,&quot;begin&quot;,&quot;beginnativepainting&quot;,&quot;boundingrect&quot;,&quot;brush&quot;,&quot;brushorigin&quot;,&quot;clipboundingrect&quot;,&quot;clippath&quot;,&quot;clipregion&quot;,&quot;combinedtransform&quot;,&quot;compositionmode&quot;,&quot;delete&quot;,&quot;device&quot;,&quot;devicetransform&quot;,&quot;drawarc&quot;,&quot;drawchord&quot;,&quot;drawconvexpolygon&quot;,&quot;drawellipse&quot;,&quot;drawglyphrun&quot;,&quot;drawimage&quot;,&quot;drawline&quot;,&quot;drawlines&quot;,&quot;drawpath&quot;,&quot;drawpicture&quot;,&quot;drawpie&quot;,&quot;drawpixmap&quot;,&quot;drawpoint&quot;,&quot;drawpoints&quot;,&quot;drawpolygon&quot;,&quot;drawpolyline&quot;,&quot;drawrect&quot;,&quot;drawrects&quot;,&quot;drawroundedrect&quot;,&quot;drawstatictext&quot;,&quot;drawtext&quot;,&quot;drawtiledpixmap&quot;,&quot;endnativepainting&quot;,&quot;endpaint&quot;,&quot;eraserect&quot;,&quot;fillpath&quot;,&quot;fillrect&quot;,&quot;font&quot;,&quot;fontinfo&quot;,&quot;hasclipping&quot;,&quot;init&quot;,&quot;initfrom&quot;,&quot;isactive&quot;,&quot;layoutdirection&quot;,&quot;objectpointer&quot;,&quot;opacity&quot;,&quot;paintengine&quot;,&quot;pen&quot;,&quot;renderhints&quot;,&quot;resettransform&quot;,&quot;restore&quot;,&quot;rotate&quot;,&quot;save&quot;,&quot;scale&quot;,&quot;setbackground&quot;,&quot;setbackgroundmode&quot;,&quot;setbrush&quot;,&quot;setbrushorigin&quot;,&quot;setclippath&quot;,&quot;setclipping&quot;,&quot;setcliprect&quot;,&quot;setclipregion&quot;,&quot;setcompositionmode&quot;,&quot;setfont&quot;,&quot;setlayoutdirection&quot;,&quot;setopacity&quot;,&quot;setpen&quot;,&quot;setrenderhint&quot;,&quot;settransform&quot;,&quot;setviewport&quot;,&quot;setviewtransformenabled&quot;,&quot;setwindow&quot;,&quot;setworldmatrixenabled&quot;,&quot;setworldtransform&quot;,&quot;shear&quot;,&quot;strokepath&quot;,&quot;testrenderhint&quot;,&quot;transform&quot;,&quot;translate&quot;,&quot;viewport&quot;,&quot;viewtransformenabled&quot;,&quot;window&quot;,&quot;worldmatrixenabled&quot;,&quot;worldtransform&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE2FUNC = ["+char(34)+"background"+char(34)+","+char(34)+"backgroundmode"+char(34)+","+char(34)+"begin"+char(34)+","+char(34)+"beginnativepainting"+char(34)+","+char(34)+"boundingrect"+char(34)+","+char(34)+"brush"+char(34)+","+char(34)+"brushorigin"+char(34)+","+char(34)+"clipboundingrect"+char(34)+","+char(34)+"clippath"+char(34)+","+char(34)+"clipregion"+char(34)+","+char(34)+"combinedtransform"+char(34)+","+char(34)+"compositionmode"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"device"+char(34)+","+char(34)+"devicetransform"+char(34)+","+char(34)+"drawarc"+char(34)+","+char(34)+"drawchord"+char(34)+","+char(34)+"drawconvexpolygon"+char(34)+","+char(34)+"drawellipse"+char(34)+","+char(34)+"drawglyphrun"+char(34)+","+char(34)+"drawimage"+char(34)+","+char(34)+"drawline"+char(34)+","+char(34)+"drawlines"+char(34)+","+char(34)+"drawpath"+char(34)+","+char(34)+"drawpicture"+char(34)+","+char(34)+"drawpie"+char(34)+","+char(34)+"drawpixmap"+char(34)+","+char(34)+"drawpoint"+char(34)+","+char(34)+"drawpoints"+char(34)+","+char(34)+"drawpolygon"+char(34)+","+char(34)+"drawpolyline"+char(34)+","+char(34)+"drawrect"+char(34)+","+char(34)+"drawrects"+char(34)+","+char(34)+"drawroundedrect"+char(34)+","+char(34)+"drawstatictext"+char(34)+","+char(34)+"drawtext"+char(34)+","+char(34)+"drawtiledpixmap"+char(34)+","+char(34)+"endnativepainting"+char(34)+","+char(34)+"endpaint"+char(34)+","+char(34)+"eraserect"+char(34)+","+char(34)+"fillpath"+char(34)+","+char(34)+"fillrect"+char(34)+","+char(34)+"font"+char(34)+","+char(34)+"fontinfo"+char(34)+","+char(34)+"hasclipping"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"initfrom"+char(34)+","+char(34)+"isactive"+char(34)+","+char(34)+"layoutdirection"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"opacity"+char(34)+","+char(34)+"paintengine"+char(34)+","+char(34)+"pen"+char(34)+","+char(34)+"renderhints"+char(34)+","+char(34)+"resettransform"+char(34)+","+char(34)+"restore"+char(34)+","+char(34)+"rotate"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"scale"+char(34)+","+char(34)+"setbackground"+char(34)+","+char(34)+"setbackgroundmode"+char(34)+","+char(34)+"setbrush"+char(34)+","+char(34)+"setbrushorigin"+char(34)+","+char(34)+"setclippath"+char(34)+","+char(34)+"setclipping"+char(34)+","+char(34)+"setcliprect"+char(34)+","+char(34)+"setclipregion"+char(34)+","+char(34)+"setcompositionmode"+char(34)+","+char(34)+"setfont"+char(34)+","+char(34)+"setlayoutdirection"+char(34)+","+char(34)+"setopacity"+char(34)+","+char(34)+"setpen"+char(34)+","+char(34)+"setrenderhint"+char(34)+","+char(34)+"settransform"+char(34)+","+char(34)+"setviewport"+char(34)+","+char(34)+"setviewtransformenabled"+char(34)+","+char(34)+"setwindow"+char(34)+","+char(34)+"setworldmatrixenabled"+char(34)+","+char(34)+"setworldtransform"+char(34)+","+char(34)+"shear"+char(34)+","+char(34)+"strokepath"+char(34)+","+char(34)+"testrenderhint"+char(34)+","+char(34)+"transform"+char(34)+","+char(34)+"translate"+char(34)+","+char(34)+"viewport"+char(34)+","+char(34)+"viewtransformenabled"+char(34)+","+char(34)+"window"+char(34)+","+char(34)+"worldmatrixenabled"+char(34)+","+char(34)+"worldtransform"+char(34)+"]"
			],
			[
				"interactionid",
				11
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE2FUNC = ["+char(34)+"background"+char(34)+","+char(34)+"backgroundmode"+char(34)+","+char(34)+"begin"+char(34)+","+char(34)+"beginnativepainting"+char(34)+","+char(34)+"boundingrect"+char(34)+","+char(34)+"brush"+char(34)+","+char(34)+"brushorigin"+char(34)+","+char(34)+"clipboundingrect"+char(34)+","+char(34)+"clippath"+char(34)+","+char(34)+"clipregion"+char(34)+","+char(34)+"combinedtransform"+char(34)+","+char(34)+"compositionmode"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"device"+char(34)+","+char(34)+"devicetransform"+char(34)+","+char(34)+"drawarc"+char(34)+","+char(34)+"drawchord"+char(34)+","+char(34)+"drawconvexpolygon"+char(34)+","+char(34)+"drawellipse"+char(34)+","+char(34)+"drawglyphrun"+char(34)+","+char(34)+"drawimage"+char(34)+","+char(34)+"drawline"+char(34)+","+char(34)+"drawlines"+char(34)+","+char(34)+"drawpath"+char(34)+","+char(34)+"drawpicture"+char(34)+","+char(34)+"drawpie"+char(34)+","+char(34)+"drawpixmap"+char(34)+","+char(34)+"drawpoint"+char(34)+","+char(34)+"drawpoints"+char(34)+","+char(34)+"drawpolygon"+char(34)+","+char(34)+"drawpolyline"+char(34)+","+char(34)+"drawrect"+char(34)+","+char(34)+"drawrects"+char(34)+","+char(34)+"drawroundedrect"+char(34)+","+char(34)+"drawstatictext"+char(34)+","+char(34)+"drawtext"+char(34)+","+char(34)+"drawtiledpixmap"+char(34)+","+char(34)+"endnativepainting"+char(34)+","+char(34)+"endpaint"+char(34)+","+char(34)+"eraserect"+char(34)+","+char(34)+"fillpath"+char(34)+","+char(34)+"fillrect"+char(34)+","+char(34)+"font"+char(34)+","+char(34)+"fontinfo"+char(34)+","+char(34)+"hasclipping"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"initfrom"+char(34)+","+char(34)+"isactive"+char(34)+","+char(34)+"layoutdirection"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"opacity"+char(34)+","+char(34)+"paintengine"+char(34)+","+char(34)+"pen"+char(34)+","+char(34)+"renderhints"+char(34)+","+char(34)+"resettransform"+char(34)+","+char(34)+"restore"+char(34)+","+char(34)+"rotate"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"scale"+char(34)+","+char(34)+"setbackground"+char(34)+","+char(34)+"setbackgroundmode"+char(34)+","+char(34)+"setbrush"+char(34)+","+char(34)+"setbrushorigin"+char(34)+","+char(34)+"setclippath"+char(34)+","+char(34)+"setclipping"+char(34)+","+char(34)+"setcliprect"+char(34)+","+char(34)+"setclipregion"+char(34)+","+char(34)+"setcompositionmode"+char(34)+","+char(34)+"setfont"+char(34)+","+char(34)+"setlayoutdirection"+char(34)+","+char(34)+"setopacity"+char(34)+","+char(34)+"setpen"+char(34)+","+char(34)+"setrenderhint"+char(34)+","+char(34)+"settransform"+char(34)+","+char(34)+"setviewport"+char(34)+","+char(34)+"setviewtransformenabled"+char(34)+","+char(34)+"setwindow"+char(34)+","+char(34)+"setworldmatrixenabled"+char(34)+","+char(34)+"setworldtransform"+char(34)+","+char(34)+"shear"+char(34)+","+char(34)+"strokepath"+char(34)+","+char(34)+"testrenderhint"+char(34)+","+char(34)+"transform"+char(34)+","+char(34)+"translate"+char(34)+","+char(34)+"viewport"+char(34)+","+char(34)+"viewtransformenabled"+char(34)+","+char(34)+"window"+char(34)+","+char(34)+"worldmatrixenabled"+char(34)+","+char(34)+"worldtransform"+char(34)+"]"
			]
		]
	],
	[
		12,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE2STEPFUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE2FUNC</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE2STEPFUNC = T_CT_QPAINTERCLASS_IP_VALUE2FUNC"
			],
			[
				"interactionid",
				12
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE2STEPFUNC = T_CT_QPAINTERCLASS_IP_VALUE2FUNC"
			]
		]
	],
	[
		13,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE2LIST</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;background(void)&nbsp;--&gt;&nbsp;QBrush&quot;,&quot;backgroundMode(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;begin(QPaintDevice&nbsp;*device)&nbsp;--&gt;&nbsp;bool&quot;,&quot;beginNativePainting(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;boundingRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;w,&nbsp;int&nbsp;h,&nbsp;int&nbsp;flags,&nbsp;QString&nbsp;text)&nbsp;--&gt;&nbsp;QRect&quot;,&quot;brush(void)&nbsp;--&gt;&nbsp;QBrush&quot;,&quot;brushOrigin(void)&nbsp;--&gt;&nbsp;QPoint&quot;,&quot;clipBoundingRect(void)&nbsp;--&gt;&nbsp;QRectF&quot;,&quot;clipPath(void)&nbsp;--&gt;&nbsp;QPainterPath&quot;,&quot;clipRegion(void)&nbsp;--&gt;&nbsp;QRegion&quot;,&quot;combinedTransform(void)&nbsp;--&gt;&nbsp;QTransform&quot;,&quot;compositionMode(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;delete(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;device(void)&nbsp;--&gt;&nbsp;QPaintDevice&quot;,&quot;deviceTransform(void)&nbsp;--&gt;&nbsp;QTransform&quot;,&quot;drawArc(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;int&nbsp;startAngle,&nbsp;int&nbsp;spanAngle)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawChord(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;int&nbsp;startAngle,&nbsp;int&nbsp;spanAngle)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawConvexPolygon(List&nbsp;*pPoints)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawEllipse(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawGlyphRun(QPointF&nbsp;position,&nbsp;QGlyphRun&nbsp;glyphs)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawImage(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;QImage&nbsp;image)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawLine(int&nbsp;x1,&nbsp;int&nbsp;y1,&nbsp;int&nbsp;x2,&nbsp;int&nbsp;y2)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawLines(QLine&nbsp;*lines,&nbsp;int&nbsp;lineCount)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPath(QPainterPath&nbsp;path)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPicture(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;QPicture&nbsp;picture)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPie(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;int&nbsp;startAngle,&nbsp;int&nbsp;spanAngle)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPixmap(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;QPixmap)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPoint(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPoints(List&nbsp;*pPoints)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPolygon(List&nbsp;*pPoints,&nbsp;Qt::FillRule&nbsp;fillRule)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawPolyline(List&nbsp;*pPoints)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawRects(QRectF&nbsp;*rectangles,&nbsp;int&nbsp;rectCount)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawRoundedRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;w,&nbsp;int&nbsp;h,&nbsp;qreal&nbsp;xRadius,&nbsp;qreal&nbsp;yRadius,&nbsp;Qt::SizeMode&nbsp;mode)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawStaticText(int&nbsp;left,&nbsp;int&nbsp;top,&nbsp;QStaticText&nbsp;staticText)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawText(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;QString&nbsp;text)&nbsp;--&gt;&nbsp;void&quot;,&quot;drawTiledPixmap(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;QPixmap&nbsp;pixmap,&nbsp;int&nbsp;sx,&nbsp;int&nbsp;sy)&nbsp;--&gt;&nbsp;void&quot;,&quot;endNativePainting(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;endpaint(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;eraseRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;void&quot;,&quot;fillPath(QPainterPath&nbsp;path,&nbsp;QBrush&nbsp;brush)&nbsp;--&gt;&nbsp;void&quot;,&quot;fillRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;QBrush)&nbsp;--&gt;&nbsp;void&quot;,&quot;font(void)&nbsp;--&gt;&nbsp;QFont&quot;,&quot;fontInfo(void)&nbsp;--&gt;&nbsp;QFontInfo&quot;,&quot;hasClipping(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;init(parent)&nbsp;--&gt;&nbsp;object&quot;,&quot;initFrom(QWidget&nbsp;*widget)&nbsp;--&gt;&nbsp;void&quot;,&quot;isActive(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;layoutDirection(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;objectpointer(void)&nbsp;--&gt;&nbsp;pointer&quot;,&quot;opacity(void)&nbsp;--&gt;&nbsp;double&quot;,&quot;paintEngine(void)&nbsp;--&gt;&nbsp;QPaintEngine&quot;,&quot;pen(void)&nbsp;--&gt;&nbsp;QPen&quot;,&quot;renderHints(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;resetTransform(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;restore(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;rotate(qreal&nbsp;angle)&nbsp;--&gt;&nbsp;void&quot;,&quot;save(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;scale(double&nbsp;sx,&nbsp;double&nbsp;sy)&nbsp;--&gt;&nbsp;void&quot;,&quot;setBackground(QBrush&nbsp;brush)&nbsp;--&gt;&nbsp;void&quot;,&quot;setBackgroundMode(Qt::BGMode&nbsp;mode)&nbsp;--&gt;&nbsp;void&quot;,&quot;setBrush(QBrush&nbsp;brush)&nbsp;--&gt;&nbsp;void&quot;,&quot;setBrushOrigin(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;--&gt;&nbsp;void&quot;,&quot;setClipPath(QPainterPath&nbsp;path,&nbsp;Qt::ClipOperation&nbsp;operation)&nbsp;--&gt;&nbsp;void&quot;,&quot;setClipping(bool&nbsp;enable)&nbsp;--&gt;&nbsp;void&quot;,&quot;setClipRect(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;Qt::ClipOperation&nbsp;operation)&nbsp;--&gt;&nbsp;void&quot;,&quot;setClipRegion(QRegion&nbsp;region,&nbsp;Qt::ClipOperation&nbsp;operation)&nbsp;--&gt;&nbsp;void&quot;,&quot;setCompositionMode(QPainter::CompositionMode&nbsp;mode)&nbsp;--&gt;&nbsp;void&quot;,&quot;setFont(QFont&nbsp;font)&nbsp;--&gt;&nbsp;void&quot;,&quot;setLayoutDirection(Qt::LayoutDirection&nbsp;direction)&nbsp;--&gt;&nbsp;void&quot;,&quot;setOpacity(qreal&nbsp;opacity)&nbsp;--&gt;&nbsp;void&quot;,&quot;setPen(QPen&nbsp;pen)&nbsp;--&gt;&nbsp;void&quot;,&quot;setRenderHint(QPainter::RenderHint&nbsp;hint,&nbsp;bool&nbsp;on)&nbsp;--&gt;&nbsp;void&quot;,&quot;setTransform(QTransform&nbsp;transform,&nbsp;bool&nbsp;combine)&nbsp;--&gt;&nbsp;void&quot;,&quot;setViewport(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;void&quot;,&quot;setViewTransformEnabled(bool&nbsp;enable)&nbsp;--&gt;&nbsp;void&quot;,&quot;setWindow(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;void&quot;,&quot;setWorldMatrixEnabled(bool&nbsp;enable)&nbsp;--&gt;&nbsp;void&quot;,&quot;setWorldTransform(&nbsp;QTransform&nbsp;matrix,&nbsp;bool&nbsp;combine)&nbsp;--&gt;&nbsp;void&quot;,&quot;shear(double&nbsp;sh,&nbsp;double&nbsp;sv)&nbsp;--&gt;&nbsp;void&quot;,&quot;strokePath(QPainterPath&nbsp;path,&nbsp;QPen&nbsp;pen)&nbsp;--&gt;&nbsp;void&quot;,&quot;testRenderHint(QPainter::RenderHint&nbsp;hint)&nbsp;--&gt;&nbsp;bool&quot;,&quot;transform(void)&nbsp;--&gt;&nbsp;QTransform&quot;,&quot;translate(double&nbsp;dx,&nbsp;double&nbsp;dy)&nbsp;--&gt;&nbsp;void&quot;,&quot;viewport(void)&nbsp;--&gt;&nbsp;QRect&quot;,&quot;viewTransformEnabled(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;window(void)&nbsp;--&gt;&nbsp;QRect&quot;,&quot;worldMatrixEnabled(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;worldTransform(void)&nbsp;--&gt;&nbsp;QTransform&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE2LIST = ["+char(34)+"background(void) --> QBrush"+char(34)+","+char(34)+"backgroundMode(void) --> int"+char(34)+","+char(34)+"begin(QPaintDevice *device) --> bool"+char(34)+","+char(34)+"beginNativePainting(void) --> void"+char(34)+","+char(34)+"boundingRect(int x, int y, int w, int h, int flags, QString text) --> QRect"+char(34)+","+char(34)+"brush(void) --> QBrush"+char(34)+","+char(34)+"brushOrigin(void) --> QPoint"+char(34)+","+char(34)+"clipBoundingRect(void) --> QRectF"+char(34)+","+char(34)+"clipPath(void) --> QPainterPath"+char(34)+","+char(34)+"clipRegion(void) --> QRegion"+char(34)+","+char(34)+"combinedTransform(void) --> QTransform"+char(34)+","+char(34)+"compositionMode(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"device(void) --> QPaintDevice"+char(34)+","+char(34)+"deviceTransform(void) --> QTransform"+char(34)+","+char(34)+"drawArc(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawChord(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawConvexPolygon(List *pPoints) --> void"+char(34)+","+char(34)+"drawEllipse(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawGlyphRun(QPointF position, QGlyphRun glyphs) --> void"+char(34)+","+char(34)+"drawImage(int x, int y, QImage image) --> void"+char(34)+","+char(34)+"drawLine(int x1, int y1, int x2, int y2) --> void"+char(34)+","+char(34)+"drawLines(QLine *lines, int lineCount) --> void"+char(34)+","+char(34)+"drawPath(QPainterPath path) --> void"+char(34)+","+char(34)+"drawPicture(int x, int y, QPicture picture) --> void"+char(34)+","+char(34)+"drawPie(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawPixmap(int x, int y, QPixmap) --> void"+char(34)+","+char(34)+"drawPoint(int x, int y) --> void"+char(34)+","+char(34)+"drawPoints(List *pPoints) --> void"+char(34)+","+char(34)+"drawPolygon(List *pPoints, Qt::FillRule fillRule) --> void"+char(34)+","+char(34)+"drawPolyline(List *pPoints) --> void"+char(34)+","+char(34)+"drawRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawRects(QRectF *rectangles, int rectCount) --> void"+char(34)+","+char(34)+"drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode) --> void"+char(34)+","+char(34)+"drawStaticText(int left, int top, QStaticText staticText) --> void"+char(34)+","+char(34)+"drawText(int x, int y, QString text) --> void"+char(34)+","+char(34)+"drawTiledPixmap(int x, int y, int width, int height, QPixmap pixmap, int sx, int sy) --> void"+char(34)+","+char(34)+"endNativePainting(void) --> void"+char(34)+","+char(34)+"endpaint(void) --> bool"+char(34)+","+char(34)+"eraseRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"fillPath(QPainterPath path, QBrush brush) --> void"+char(34)+","+char(34)+"fillRect(int x, int y, int width, int height, QBrush) --> void"+char(34)+","+char(34)+"font(void) --> QFont"+char(34)+","+char(34)+"fontInfo(void) --> QFontInfo"+char(34)+","+char(34)+"hasClipping(void) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"initFrom(QWidget *widget) --> void"+char(34)+","+char(34)+"isActive(void) --> bool"+char(34)+","+char(34)+"layoutDirection(void) --> int"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"opacity(void) --> double"+char(34)+","+char(34)+"paintEngine(void) --> QPaintEngine"+char(34)+","+char(34)+"pen(void) --> QPen"+char(34)+","+char(34)+"renderHints(void) --> int"+char(34)+","+char(34)+"resetTransform(void) --> void"+char(34)+","+char(34)+"restore(void) --> void"+char(34)+","+char(34)+"rotate(qreal angle) --> void"+char(34)+","+char(34)+"save(void) --> void"+char(34)+","+char(34)+"scale(double sx, double sy) --> void"+char(34)+","+char(34)+"setBackground(QBrush brush) --> void"+char(34)+","+char(34)+"setBackgroundMode(Qt::BGMode mode) --> void"+char(34)+","+char(34)+"setBrush(QBrush brush) --> void"+char(34)+","+char(34)+"setBrushOrigin(int x, int y) --> void"+char(34)+","+char(34)+"setClipPath(QPainterPath path, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipping(bool enable) --> void"+char(34)+","+char(34)+"setClipRect(int x, int y, int width, int height, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipRegion(QRegion region, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setCompositionMode(QPainter::CompositionMode mode) --> void"+char(34)+","+char(34)+"setFont(QFont font) --> void"+char(34)+","+char(34)+"setLayoutDirection(Qt::LayoutDirection direction) --> void"+char(34)+","+char(34)+"setOpacity(qreal opacity) --> void"+char(34)+","+char(34)+"setPen(QPen pen) --> void"+char(34)+","+char(34)+"setRenderHint(QPainter::RenderHint hint, bool on) --> void"+char(34)+","+char(34)+"setTransform(QTransform transform, bool combine) --> void"+char(34)+","+char(34)+"setViewport(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setViewTransformEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWindow(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setWorldMatrixEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWorldTransform( QTransform matrix, bool combine) --> void"+char(34)+","+char(34)+"shear(double sh, double sv) --> void"+char(34)+","+char(34)+"strokePath(QPainterPath path, QPen pen) --> void"+char(34)+","+char(34)+"testRenderHint(QPainter::RenderHint hint) --> bool"+char(34)+","+char(34)+"transform(void) --> QTransform"+char(34)+","+char(34)+"translate(double dx, double dy) --> void"+char(34)+","+char(34)+"viewport(void) --> QRect"+char(34)+","+char(34)+"viewTransformEnabled(void) --> bool"+char(34)+","+char(34)+"window(void) --> QRect"+char(34)+","+char(34)+"worldMatrixEnabled(void) --> bool"+char(34)+","+char(34)+"worldTransform(void) --> QTransform"+char(34)+"]"
			],
			[
				"interactionid",
				13
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE2LIST = ["+char(34)+"background(void) --> QBrush"+char(34)+","+char(34)+"backgroundMode(void) --> int"+char(34)+","+char(34)+"begin(QPaintDevice *device) --> bool"+char(34)+","+char(34)+"beginNativePainting(void) --> void"+char(34)+","+char(34)+"boundingRect(int x, int y, int w, int h, int flags, QString text) --> QRect"+char(34)+","+char(34)+"brush(void) --> QBrush"+char(34)+","+char(34)+"brushOrigin(void) --> QPoint"+char(34)+","+char(34)+"clipBoundingRect(void) --> QRectF"+char(34)+","+char(34)+"clipPath(void) --> QPainterPath"+char(34)+","+char(34)+"clipRegion(void) --> QRegion"+char(34)+","+char(34)+"combinedTransform(void) --> QTransform"+char(34)+","+char(34)+"compositionMode(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"device(void) --> QPaintDevice"+char(34)+","+char(34)+"deviceTransform(void) --> QTransform"+char(34)+","+char(34)+"drawArc(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawChord(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawConvexPolygon(List *pPoints) --> void"+char(34)+","+char(34)+"drawEllipse(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawGlyphRun(QPointF position, QGlyphRun glyphs) --> void"+char(34)+","+char(34)+"drawImage(int x, int y, QImage image) --> void"+char(34)+","+char(34)+"drawLine(int x1, int y1, int x2, int y2) --> void"+char(34)+","+char(34)+"drawLines(QLine *lines, int lineCount) --> void"+char(34)+","+char(34)+"drawPath(QPainterPath path) --> void"+char(34)+","+char(34)+"drawPicture(int x, int y, QPicture picture) --> void"+char(34)+","+char(34)+"drawPie(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawPixmap(int x, int y, QPixmap) --> void"+char(34)+","+char(34)+"drawPoint(int x, int y) --> void"+char(34)+","+char(34)+"drawPoints(List *pPoints) --> void"+char(34)+","+char(34)+"drawPolygon(List *pPoints, Qt::FillRule fillRule) --> void"+char(34)+","+char(34)+"drawPolyline(List *pPoints) --> void"+char(34)+","+char(34)+"drawRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawRects(QRectF *rectangles, int rectCount) --> void"+char(34)+","+char(34)+"drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode) --> void"+char(34)+","+char(34)+"drawStaticText(int left, int top, QStaticText staticText) --> void"+char(34)+","+char(34)+"drawText(int x, int y, QString text) --> void"+char(34)+","+char(34)+"drawTiledPixmap(int x, int y, int width, int height, QPixmap pixmap, int sx, int sy) --> void"+char(34)+","+char(34)+"endNativePainting(void) --> void"+char(34)+","+char(34)+"endpaint(void) --> bool"+char(34)+","+char(34)+"eraseRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"fillPath(QPainterPath path, QBrush brush) --> void"+char(34)+","+char(34)+"fillRect(int x, int y, int width, int height, QBrush) --> void"+char(34)+","+char(34)+"font(void) --> QFont"+char(34)+","+char(34)+"fontInfo(void) --> QFontInfo"+char(34)+","+char(34)+"hasClipping(void) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"initFrom(QWidget *widget) --> void"+char(34)+","+char(34)+"isActive(void) --> bool"+char(34)+","+char(34)+"layoutDirection(void) --> int"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"opacity(void) --> double"+char(34)+","+char(34)+"paintEngine(void) --> QPaintEngine"+char(34)+","+char(34)+"pen(void) --> QPen"+char(34)+","+char(34)+"renderHints(void) --> int"+char(34)+","+char(34)+"resetTransform(void) --> void"+char(34)+","+char(34)+"restore(void) --> void"+char(34)+","+char(34)+"rotate(qreal angle) --> void"+char(34)+","+char(34)+"save(void) --> void"+char(34)+","+char(34)+"scale(double sx, double sy) --> void"+char(34)+","+char(34)+"setBackground(QBrush brush) --> void"+char(34)+","+char(34)+"setBackgroundMode(Qt::BGMode mode) --> void"+char(34)+","+char(34)+"setBrush(QBrush brush) --> void"+char(34)+","+char(34)+"setBrushOrigin(int x, int y) --> void"+char(34)+","+char(34)+"setClipPath(QPainterPath path, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipping(bool enable) --> void"+char(34)+","+char(34)+"setClipRect(int x, int y, int width, int height, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipRegion(QRegion region, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setCompositionMode(QPainter::CompositionMode mode) --> void"+char(34)+","+char(34)+"setFont(QFont font) --> void"+char(34)+","+char(34)+"setLayoutDirection(Qt::LayoutDirection direction) --> void"+char(34)+","+char(34)+"setOpacity(qreal opacity) --> void"+char(34)+","+char(34)+"setPen(QPen pen) --> void"+char(34)+","+char(34)+"setRenderHint(QPainter::RenderHint hint, bool on) --> void"+char(34)+","+char(34)+"setTransform(QTransform transform, bool combine) --> void"+char(34)+","+char(34)+"setViewport(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setViewTransformEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWindow(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setWorldMatrixEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWorldTransform( QTransform matrix, bool combine) --> void"+char(34)+","+char(34)+"shear(double sh, double sv) --> void"+char(34)+","+char(34)+"strokePath(QPainterPath path, QPen pen) --> void"+char(34)+","+char(34)+"testRenderHint(QPainter::RenderHint hint) --> bool"+char(34)+","+char(34)+"transform(void) --> QTransform"+char(34)+","+char(34)+"translate(double dx, double dy) --> void"+char(34)+","+char(34)+"viewport(void) --> QRect"+char(34)+","+char(34)+"viewTransformEnabled(void) --> bool"+char(34)+","+char(34)+"window(void) --> QRect"+char(34)+","+char(34)+"worldMatrixEnabled(void) --> bool"+char(34)+","+char(34)+"worldTransform(void) --> QTransform"+char(34)+"]"
			]
		]
	],
	[
		14,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE3</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Parameters&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE3 = "+char(34)+"Parameters"+char(34)+""
			],
			[
				"interactionid",
				14
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE3 = "+char(34)+"Parameters"+char(34)+""
			]
		]
	],
	[
		15,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPAINTERCLASS_IP_VALUE4</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;Output&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPAINTERCLASS_IP_VALUE4 = "+char(34)+"Output"+char(34)+""
			],
			[
				"interactionid",
				15
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPAINTERCLASS_IP_VALUE4 = "+char(34)+"Output"+char(34)+""
			]
		]
	]
]

aInteractionsTable = [
	[
		1,
		1,
		"",
		"04/03/2025",
		"21:47:22",
		""
	],
	[
		2,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;/*;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		3,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;**	Project : Programming Without Coding Technology (PWCT) Version 2.0;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		4,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;**	File Purpose :  qpainterclass Component;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		5,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;**	Date : 2021.08.09;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		6,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		7,
		1,
		"comment_text",
		"04/03/2025",
		"21:47:22",
		"value;;_RV_;;*/;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		8,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_TITLE;;_RV_;;rightside;;_RV_;;"+char(34)+"QPainter Class Component"+char(34)+";;_RV_;;"
	],
	[
		9,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE;;_RV_;;rightside;;_RV_;;"+char(34)+"Object"+char(34)+";;_RV_;;"
	],
	[
		10,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE2;;_RV_;;rightside;;_RV_;;"+char(34)+"Method"+char(34)+";;_RV_;;"
	],
	[
		11,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE2FUNC;;_RV_;;rightside;;_RV_;;["+char(34)+"background"+char(34)+","+char(34)+"backgroundmode"+char(34)+","+char(34)+"begin"+char(34)+","+char(34)+"beginnativepainting"+char(34)+","+char(34)+"boundingrect"+char(34)+","+char(34)+"brush"+char(34)+","+char(34)+"brushorigin"+char(34)+","+char(34)+"clipboundingrect"+char(34)+","+char(34)+"clippath"+char(34)+","+char(34)+"clipregion"+char(34)+","+char(34)+"combinedtransform"+char(34)+","+char(34)+"compositionmode"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"device"+char(34)+","+char(34)+"devicetransform"+char(34)+","+char(34)+"drawarc"+char(34)+","+char(34)+"drawchord"+char(34)+","+char(34)+"drawconvexpolygon"+char(34)+","+char(34)+"drawellipse"+char(34)+","+char(34)+"drawglyphrun"+char(34)+","+char(34)+"drawimage"+char(34)+","+char(34)+"drawline"+char(34)+","+char(34)+"drawlines"+char(34)+","+char(34)+"drawpath"+char(34)+","+char(34)+"drawpicture"+char(34)+","+char(34)+"drawpie"+char(34)+","+char(34)+"drawpixmap"+char(34)+","+char(34)+"drawpoint"+char(34)+","+char(34)+"drawpoints"+char(34)+","+char(34)+"drawpolygon"+char(34)+","+char(34)+"drawpolyline"+char(34)+","+char(34)+"drawrect"+char(34)+","+char(34)+"drawrects"+char(34)+","+char(34)+"drawroundedrect"+char(34)+","+char(34)+"drawstatictext"+char(34)+","+char(34)+"drawtext"+char(34)+","+char(34)+"drawtiledpixmap"+char(34)+","+char(34)+"endnativepainting"+char(34)+","+char(34)+"endpaint"+char(34)+","+char(34)+"eraserect"+char(34)+","+char(34)+"fillpath"+char(34)+","+char(34)+"fillrect"+char(34)+","+char(34)+"font"+char(34)+","+char(34)+"fontinfo"+char(34)+","+char(34)+"hasclipping"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"initfrom"+char(34)+","+char(34)+"isactive"+char(34)+","+char(34)+"layoutdirection"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"opacity"+char(34)+","+char(34)+"paintengine"+char(34)+","+char(34)+"pen"+char(34)+","+char(34)+"renderhints"+char(34)+","+char(34)+"resettransform"+char(34)+","+char(34)+"restore"+char(34)+","+char(34)+"rotate"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"scale"+char(34)+","+char(34)+"setbackground"+char(34)+","+char(34)+"setbackgroundmode"+char(34)+","+char(34)+"setbrush"+char(34)+","+char(34)+"setbrushorigin"+char(34)+","+char(34)+"setclippath"+char(34)+","+char(34)+"setclipping"+char(34)+","+char(34)+"setcliprect"+char(34)+","+char(34)+"setclipregion"+char(34)+","+char(34)+"setcompositionmode"+char(34)+","+char(34)+"setfont"+char(34)+","+char(34)+"setlayoutdirection"+char(34)+","+char(34)+"setopacity"+char(34)+","+char(34)+"setpen"+char(34)+","+char(34)+"setrenderhint"+char(34)+","+char(34)+"settransform"+char(34)+","+char(34)+"setviewport"+char(34)+","+char(34)+"setviewtransformenabled"+char(34)+","+char(34)+"setwindow"+char(34)+","+char(34)+"setworldmatrixenabled"+char(34)+","+char(34)+"setworldtransform"+char(34)+","+char(34)+"shear"+char(34)+","+char(34)+"strokepath"+char(34)+","+char(34)+"testrenderhint"+char(34)+","+char(34)+"transform"+char(34)+","+char(34)+"translate"+char(34)+","+char(34)+"viewport"+char(34)+","+char(34)+"viewtransformenabled"+char(34)+","+char(34)+"window"+char(34)+","+char(34)+"worldmatrixenabled"+char(34)+","+char(34)+"worldtransform"+char(34)+"];;_RV_;;"
	],
	[
		12,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE2STEPFUNC;;_RV_;;rightside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE2FUNC;;_RV_;;"
	],
	[
		13,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE2LIST;;_RV_;;rightside;;_RV_;;["+char(34)+"background(void) --> QBrush"+char(34)+","+char(34)+"backgroundMode(void) --> int"+char(34)+","+char(34)+"begin(QPaintDevice *device) --> bool"+char(34)+","+char(34)+"beginNativePainting(void) --> void"+char(34)+","+char(34)+"boundingRect(int x, int y, int w, int h, int flags, QString text) --> QRect"+char(34)+","+char(34)+"brush(void) --> QBrush"+char(34)+","+char(34)+"brushOrigin(void) --> QPoint"+char(34)+","+char(34)+"clipBoundingRect(void) --> QRectF"+char(34)+","+char(34)+"clipPath(void) --> QPainterPath"+char(34)+","+char(34)+"clipRegion(void) --> QRegion"+char(34)+","+char(34)+"combinedTransform(void) --> QTransform"+char(34)+","+char(34)+"compositionMode(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"device(void) --> QPaintDevice"+char(34)+","+char(34)+"deviceTransform(void) --> QTransform"+char(34)+","+char(34)+"drawArc(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawChord(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawConvexPolygon(List *pPoints) --> void"+char(34)+","+char(34)+"drawEllipse(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawGlyphRun(QPointF position, QGlyphRun glyphs) --> void"+char(34)+","+char(34)+"drawImage(int x, int y, QImage image) --> void"+char(34)+","+char(34)+"drawLine(int x1, int y1, int x2, int y2) --> void"+char(34)+","+char(34)+"drawLines(QLine *lines, int lineCount) --> void"+char(34)+","+char(34)+"drawPath(QPainterPath path) --> void"+char(34)+","+char(34)+"drawPicture(int x, int y, QPicture picture) --> void"+char(34)+","+char(34)+"drawPie(int x, int y, int width, int height, int startAngle, int spanAngle) --> void"+char(34)+","+char(34)+"drawPixmap(int x, int y, QPixmap) --> void"+char(34)+","+char(34)+"drawPoint(int x, int y) --> void"+char(34)+","+char(34)+"drawPoints(List *pPoints) --> void"+char(34)+","+char(34)+"drawPolygon(List *pPoints, Qt::FillRule fillRule) --> void"+char(34)+","+char(34)+"drawPolyline(List *pPoints) --> void"+char(34)+","+char(34)+"drawRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"drawRects(QRectF *rectangles, int rectCount) --> void"+char(34)+","+char(34)+"drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode) --> void"+char(34)+","+char(34)+"drawStaticText(int left, int top, QStaticText staticText) --> void"+char(34)+","+char(34)+"drawText(int x, int y, QString text) --> void"+char(34)+","+char(34)+"drawTiledPixmap(int x, int y, int width, int height, QPixmap pixmap, int sx, int sy) --> void"+char(34)+","+char(34)+"endNativePainting(void) --> void"+char(34)+","+char(34)+"endpaint(void) --> bool"+char(34)+","+char(34)+"eraseRect(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"fillPath(QPainterPath path, QBrush brush) --> void"+char(34)+","+char(34)+"fillRect(int x, int y, int width, int height, QBrush) --> void"+char(34)+","+char(34)+"font(void) --> QFont"+char(34)+","+char(34)+"fontInfo(void) --> QFontInfo"+char(34)+","+char(34)+"hasClipping(void) --> bool"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"initFrom(QWidget *widget) --> void"+char(34)+","+char(34)+"isActive(void) --> bool"+char(34)+","+char(34)+"layoutDirection(void) --> int"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"opacity(void) --> double"+char(34)+","+char(34)+"paintEngine(void) --> QPaintEngine"+char(34)+","+char(34)+"pen(void) --> QPen"+char(34)+","+char(34)+"renderHints(void) --> int"+char(34)+","+char(34)+"resetTransform(void) --> void"+char(34)+","+char(34)+"restore(void) --> void"+char(34)+","+char(34)+"rotate(qreal angle) --> void"+char(34)+","+char(34)+"save(void) --> void"+char(34)+","+char(34)+"scale(double sx, double sy) --> void"+char(34)+","+char(34)+"setBackground(QBrush brush) --> void"+char(34)+","+char(34)+"setBackgroundMode(Qt::BGMode mode) --> void"+char(34)+","+char(34)+"setBrush(QBrush brush) --> void"+char(34)+","+char(34)+"setBrushOrigin(int x, int y) --> void"+char(34)+","+char(34)+"setClipPath(QPainterPath path, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipping(bool enable) --> void"+char(34)+","+char(34)+"setClipRect(int x, int y, int width, int height, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setClipRegion(QRegion region, Qt::ClipOperation operation) --> void"+char(34)+","+char(34)+"setCompositionMode(QPainter::CompositionMode mode) --> void"+char(34)+","+char(34)+"setFont(QFont font) --> void"+char(34)+","+char(34)+"setLayoutDirection(Qt::LayoutDirection direction) --> void"+char(34)+","+char(34)+"setOpacity(qreal opacity) --> void"+char(34)+","+char(34)+"setPen(QPen pen) --> void"+char(34)+","+char(34)+"setRenderHint(QPainter::RenderHint hint, bool on) --> void"+char(34)+","+char(34)+"setTransform(QTransform transform, bool combine) --> void"+char(34)+","+char(34)+"setViewport(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setViewTransformEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWindow(int x, int y, int width, int height) --> void"+char(34)+","+char(34)+"setWorldMatrixEnabled(bool enable) --> void"+char(34)+","+char(34)+"setWorldTransform( QTransform matrix, bool combine) --> void"+char(34)+","+char(34)+"shear(double sh, double sv) --> void"+char(34)+","+char(34)+"strokePath(QPainterPath path, QPen pen) --> void"+char(34)+","+char(34)+"testRenderHint(QPainter::RenderHint hint) --> bool"+char(34)+","+char(34)+"transform(void) --> QTransform"+char(34)+","+char(34)+"translate(double dx, double dy) --> void"+char(34)+","+char(34)+"viewport(void) --> QRect"+char(34)+","+char(34)+"viewTransformEnabled(void) --> bool"+char(34)+","+char(34)+"window(void) --> QRect"+char(34)+","+char(34)+"worldMatrixEnabled(void) --> bool"+char(34)+","+char(34)+"worldTransform(void) --> QTransform"+char(34)+"];;_RV_;;"
	],
	[
		14,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE3;;_RV_;;rightside;;_RV_;;"+char(34)+"Parameters"+char(34)+";;_RV_;;"
	],
	[
		15,
		1,
		"assignment",
		"04/03/2025",
		"21:47:22",
		"leftside;;_RV_;;T_CT_QPAINTERCLASS_IP_VALUE4;;_RV_;;rightside;;_RV_;;"+char(34)+"Output"+char(34)+";;_RV_;;"
	]
]

# End of Visual Source File