# Visual Source File 

cVisualSourceFileVersion = '1.0.0'
cVisualLanguageName      = 'RingPWCT'
cNaturalLanguageName     = 'english'
nStepsID                 = 16		
nInteractionsID          = 16

aStepsTable = [
	[
		1,
		0,
		[
			[
				"name",
				"Start Point"
			],
			[
				"active",
				1
			],
			[
				"code",
				""
			],
			[
				"interactionid",
				1
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			]
		]
	],
	[
		2,
		1,
		[
			[
				"name",
				"/*"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#/*
"
			],
			[
				"interactionid",
				2
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"/*"
			]
		]
	],
	[
		3,
		1,
		[
			[
				"name",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Project : Programming Without Coding Technology (PWCT) Version 2.0
"
			],
			[
				"interactionid",
				3
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Project : Programming Without Coding Technology (PWCT) Version 2.0"
			]
		]
	],
	[
		4,
		1,
		[
			[
				"name",
				"**	File Purpose :  qpixmapclass Component"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	File Purpose :  qpixmapclass Component
"
			],
			[
				"interactionid",
				4
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	File Purpose :  qpixmapclass Component"
			]
		]
	],
	[
		5,
		1,
		[
			[
				"name",
				"**	Date : 2018.03.18"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Date : 2018.03.18
"
			],
			[
				"interactionid",
				5
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Date : 2018.03.18"
			]
		]
	],
	[
		6,
		1,
		[
			[
				"name",
				"**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>
"
			],
			[
				"interactionid",
				6
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"**	Author :  Mahmoud Fayed "
			]
		]
	],
	[
		7,
		1,
		[
			[
				"name",
				"*/"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#*/
"
			],
			[
				"interactionid",
				7
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"*/"
			]
		]
	],
	[
		8,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_TITLE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;مكون&nbsp;فئة&nbsp;خريطة&nbsp;النقاط&nbsp;&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_TITLE = "+char(34)+"مكون فئة خريطة النقاط "+char(34)+""
			],
			[
				"interactionid",
				8
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_TITLE = "+char(34)+"مكون فئة خريطة النقاط "+char(34)+""
			]
		]
	],
	[
		9,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;اسم&nbsp;الكائن&nbsp;:&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE = "+char(34)+"اسم الكائن :"+char(34)+""
			],
			[
				"interactionid",
				9
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE = "+char(34)+"اسم الكائن :"+char(34)+""
			]
		]
	],
	[
		10,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE2</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;الميثود&nbsp;:&nbsp;&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE2 = "+char(34)+"الميثود : "+char(34)+""
			],
			[
				"interactionid",
				10
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE2 = "+char(34)+"الميثود : "+char(34)+""
			]
		]
	],
	[
		11,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE2FUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;cachekey&quot;,&quot;convertfromimage&quot;,&quot;copy&quot;,&quot;copy_2&quot;,&quot;createheuristicmask&quot;,&quot;createmaskfromcolor&quot;,&quot;defaultdepth&quot;,&quot;delete&quot;,&quot;depth&quot;,&quot;detach&quot;,&quot;devicepixelratio&quot;,&quot;fill&quot;,&quot;fromimage&quot;,&quot;fromimage_2&quot;,&quot;fromimagereader&quot;,&quot;hasalpha&quot;,&quot;hasalphachannel&quot;,&quot;height&quot;,&quot;init&quot;,&quot;isnull&quot;,&quot;isqbitmap&quot;,&quot;loadfromdata&quot;,&quot;loadfromdata_2&quot;,&quot;loadpixmap&quot;,&quot;mask&quot;,&quot;objectpointer&quot;,&quot;rect&quot;,&quot;save&quot;,&quot;save_2&quot;,&quot;scaled&quot;,&quot;scaled_2&quot;,&quot;scaledtoheight&quot;,&quot;scaledtowidth&quot;,&quot;scroll&quot;,&quot;scroll_2&quot;,&quot;setdevicepixelratio&quot;,&quot;setmask&quot;,&quot;size&quot;,&quot;swap&quot;,&quot;toimage&quot;,&quot;transformed&quot;,&quot;transformed_2&quot;,&quot;truematrix&quot;,&quot;truematrix_2&quot;,&quot;width&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE2FUNC = ["+char(34)+"cachekey"+char(34)+","+char(34)+"convertfromimage"+char(34)+","+char(34)+"copy"+char(34)+","+char(34)+"copy_2"+char(34)+","+char(34)+"createheuristicmask"+char(34)+","+char(34)+"createmaskfromcolor"+char(34)+","+char(34)+"defaultdepth"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"depth"+char(34)+","+char(34)+"detach"+char(34)+","+char(34)+"devicepixelratio"+char(34)+","+char(34)+"fill"+char(34)+","+char(34)+"fromimage"+char(34)+","+char(34)+"fromimage_2"+char(34)+","+char(34)+"fromimagereader"+char(34)+","+char(34)+"hasalpha"+char(34)+","+char(34)+"hasalphachannel"+char(34)+","+char(34)+"height"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"isnull"+char(34)+","+char(34)+"isqbitmap"+char(34)+","+char(34)+"loadfromdata"+char(34)+","+char(34)+"loadfromdata_2"+char(34)+","+char(34)+"loadpixmap"+char(34)+","+char(34)+"mask"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"rect"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"save_2"+char(34)+","+char(34)+"scaled"+char(34)+","+char(34)+"scaled_2"+char(34)+","+char(34)+"scaledtoheight"+char(34)+","+char(34)+"scaledtowidth"+char(34)+","+char(34)+"scroll"+char(34)+","+char(34)+"scroll_2"+char(34)+","+char(34)+"setdevicepixelratio"+char(34)+","+char(34)+"setmask"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"swap"+char(34)+","+char(34)+"toimage"+char(34)+","+char(34)+"transformed"+char(34)+","+char(34)+"transformed_2"+char(34)+","+char(34)+"truematrix"+char(34)+","+char(34)+"truematrix_2"+char(34)+","+char(34)+"width"+char(34)+"]"
			],
			[
				"interactionid",
				11
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE2FUNC = ["+char(34)+"cachekey"+char(34)+","+char(34)+"convertfromimage"+char(34)+","+char(34)+"copy"+char(34)+","+char(34)+"copy_2"+char(34)+","+char(34)+"createheuristicmask"+char(34)+","+char(34)+"createmaskfromcolor"+char(34)+","+char(34)+"defaultdepth"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"depth"+char(34)+","+char(34)+"detach"+char(34)+","+char(34)+"devicepixelratio"+char(34)+","+char(34)+"fill"+char(34)+","+char(34)+"fromimage"+char(34)+","+char(34)+"fromimage_2"+char(34)+","+char(34)+"fromimagereader"+char(34)+","+char(34)+"hasalpha"+char(34)+","+char(34)+"hasalphachannel"+char(34)+","+char(34)+"height"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"isnull"+char(34)+","+char(34)+"isqbitmap"+char(34)+","+char(34)+"loadfromdata"+char(34)+","+char(34)+"loadfromdata_2"+char(34)+","+char(34)+"loadpixmap"+char(34)+","+char(34)+"mask"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"rect"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"save_2"+char(34)+","+char(34)+"scaled"+char(34)+","+char(34)+"scaled_2"+char(34)+","+char(34)+"scaledtoheight"+char(34)+","+char(34)+"scaledtowidth"+char(34)+","+char(34)+"scroll"+char(34)+","+char(34)+"scroll_2"+char(34)+","+char(34)+"setdevicepixelratio"+char(34)+","+char(34)+"setmask"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"swap"+char(34)+","+char(34)+"toimage"+char(34)+","+char(34)+"transformed"+char(34)+","+char(34)+"transformed_2"+char(34)+","+char(34)+"truematrix"+char(34)+","+char(34)+"truematrix_2"+char(34)+","+char(34)+"width"+char(34)+"]"
			]
		]
	],
	[
		12,
		1,
		[
			[
				"name",
				"Copy the list to support changing the generated method name in the Steps Tree"
			],
			[
				"active",
				1
			],
			[
				"code",
				"#Copy the list to support changing the generated method name in the Steps Tree
"
			],
			[
				"interactionid",
				12
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				1
			],
			[
				"plainname",
				"Copy the list to support changing the generated method name in the Steps Tree"
			]
		]
	],
	[
		13,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE2STEPFUNC</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE2FUNC</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE2STEPFUNC = T_CT_QPIXMAPCLASS_IP_VALUE2FUNC"
			],
			[
				"interactionid",
				13
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE2STEPFUNC = T_CT_QPIXMAPCLASS_IP_VALUE2FUNC"
			]
		]
	],
	[
		14,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE2LIST</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">[&quot;cacheKey(void)&nbsp;--&gt;&nbsp;qint64&quot;,&quot;convertFromImage(QImage&nbsp;image,&nbsp;Qt::ImageConversionFlags&nbsp;flags)&nbsp;--&gt;&nbsp;bool&quot;,&quot;copy(int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;copy_2(QRect&nbsp;rectangle)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;createHeuristicMask(bool&nbsp;clipTight)&nbsp;--&gt;&nbsp;QBitmap&quot;,&quot;createMaskFromColor(QColor&nbsp;,&nbsp;Qt::MaskMode)&nbsp;--&gt;&nbsp;QBitmap&quot;,&quot;defaultDepth(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;delete(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;depth(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;detach(void)&nbsp;--&gt;&nbsp;void&quot;,&quot;devicePixelRatio(void)&nbsp;--&gt;&nbsp;qreal&quot;,&quot;fill(QColor)&nbsp;--&gt;&nbsp;void&quot;,&quot;fromImage(QImage,Qt::ImageConversionFlags)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;fromImage_2(QImage&nbsp;image,&nbsp;Qt::ImageConversionFlags&nbsp;flags)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;fromImageReader(QImageReader&nbsp;*imageReader,&nbsp;Qt::ImageConversionFlags&nbsp;flags)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;hasAlpha(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;hasAlphaChannel(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;height(void)&nbsp;--&gt;&nbsp;int&quot;,&quot;init(parent)&nbsp;--&gt;&nbsp;object&quot;,&quot;isNull(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;isQBitmap(void)&nbsp;--&gt;&nbsp;bool&quot;,&quot;loadFromData(uchar&nbsp;*data,&nbsp;uint&nbsp;len,&nbsp;char&nbsp;*format,&nbsp;Qt::ImageConversionFlags&nbsp;flags)&nbsp;--&gt;&nbsp;bool&quot;,&quot;loadFromData_2(QByteArray&nbsp;data,&nbsp;char&nbsp;*format,&nbsp;Qt::ImageConversionFlags&nbsp;flags)&nbsp;--&gt;&nbsp;bool&quot;,&quot;loadpixmap(QString,&nbsp;char&nbsp;*,&nbsp;Qt::ImageConversionFlags&nbsp;)&nbsp;--&gt;&nbsp;bool&quot;,&quot;mask(void)&nbsp;--&gt;&nbsp;QBitmap&quot;,&quot;objectpointer(void)&nbsp;--&gt;&nbsp;pointer&quot;,&quot;rect(void)&nbsp;--&gt;&nbsp;QRect&quot;,&quot;save(QString&nbsp;fileName,&nbsp;char&nbsp;*format,&nbsp;int&nbsp;quality)&nbsp;--&gt;&nbsp;bool&quot;,&quot;save_2(QIODevice&nbsp;*device,&nbsp;char&nbsp;*format,&nbsp;int&nbsp;quality)&nbsp;--&gt;&nbsp;bool&quot;,&quot;scaled(int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;Qt::AspectRatioMode&nbsp;aspectRatioMode,&nbsp;Qt::TransformationMode&nbsp;transformMode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;scaled_2(QSize&nbsp;size,&nbsp;Qt::AspectRatioMode&nbsp;aspectRatioMode,&nbsp;Qt::TransformationMode&nbsp;transformMode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;scaledToHeight(int&nbsp;height,&nbsp;Qt::TransformationMode&nbsp;mode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;scaledToWidth(int&nbsp;width,&nbsp;Qt::TransformationMode&nbsp;mode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;scroll(int&nbsp;dx,&nbsp;int&nbsp;dy,&nbsp;int&nbsp;x,&nbsp;int&nbsp;y,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height,&nbsp;QRegion&nbsp;*exposed)&nbsp;--&gt;&nbsp;void&quot;,&quot;scroll_2(int&nbsp;dx,&nbsp;int&nbsp;dy,&nbsp;QRect&nbsp;rect,&nbsp;QRegion&nbsp;*exposed)&nbsp;--&gt;&nbsp;void&quot;,&quot;setDevicePixelRatio(qreal&nbsp;scaleFactor)&nbsp;--&gt;&nbsp;void&quot;,&quot;setMask(QBitmap)&nbsp;--&gt;&nbsp;void&quot;,&quot;size(void)&nbsp;--&gt;&nbsp;QSize&quot;,&quot;swap(QPixmap&nbsp;other)&nbsp;--&gt;&nbsp;void&quot;,&quot;toImage(void)&nbsp;--&gt;&nbsp;QImage&quot;,&quot;transformed(QTransform&nbsp;transform,&nbsp;Qt::TransformationMode&nbsp;mode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;transformed_2(QMatrix&nbsp;matrix,&nbsp;Qt::TransformationMode&nbsp;mode)&nbsp;--&gt;&nbsp;QPixmap&quot;,&quot;trueMatrix(QTransform&nbsp;matrix,&nbsp;int&nbsp;width,&nbsp;int&nbsp;height)&nbsp;--&gt;&nbsp;QTransform&quot;,&quot;trueMatrix_2(QMatrix&nbsp;m,&nbsp;int&nbsp;w,&nbsp;int&nbsp;h)&nbsp;--&gt;&nbsp;QMatrix&quot;,&quot;width(void)&nbsp;--&gt;&nbsp;int&quot;]</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE2LIST = ["+char(34)+"cacheKey(void) --> qint64"+char(34)+","+char(34)+"convertFromImage(QImage image, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"copy(int x, int y, int width, int height) --> QPixmap"+char(34)+","+char(34)+"copy_2(QRect rectangle) --> QPixmap"+char(34)+","+char(34)+"createHeuristicMask(bool clipTight) --> QBitmap"+char(34)+","+char(34)+"createMaskFromColor(QColor , Qt::MaskMode) --> QBitmap"+char(34)+","+char(34)+"defaultDepth(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"depth(void) --> int"+char(34)+","+char(34)+"detach(void) --> void"+char(34)+","+char(34)+"devicePixelRatio(void) --> qreal"+char(34)+","+char(34)+"fill(QColor) --> void"+char(34)+","+char(34)+"fromImage(QImage,Qt::ImageConversionFlags) --> QPixmap"+char(34)+","+char(34)+"fromImage_2(QImage image, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"hasAlpha(void) --> bool"+char(34)+","+char(34)+"hasAlphaChannel(void) --> bool"+char(34)+","+char(34)+"height(void) --> int"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"isNull(void) --> bool"+char(34)+","+char(34)+"isQBitmap(void) --> bool"+char(34)+","+char(34)+"loadFromData(uchar *data, uint len, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadFromData_2(QByteArray data, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadpixmap(QString, char *, Qt::ImageConversionFlags ) --> bool"+char(34)+","+char(34)+"mask(void) --> QBitmap"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"rect(void) --> QRect"+char(34)+","+char(34)+"save(QString fileName, char *format, int quality) --> bool"+char(34)+","+char(34)+"save_2(QIODevice *device, char *format, int quality) --> bool"+char(34)+","+char(34)+"scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaled_2(QSize size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaledToHeight(int height, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scaledToWidth(int width, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed) --> void"+char(34)+","+char(34)+"scroll_2(int dx, int dy, QRect rect, QRegion *exposed) --> void"+char(34)+","+char(34)+"setDevicePixelRatio(qreal scaleFactor) --> void"+char(34)+","+char(34)+"setMask(QBitmap) --> void"+char(34)+","+char(34)+"size(void) --> QSize"+char(34)+","+char(34)+"swap(QPixmap other) --> void"+char(34)+","+char(34)+"toImage(void) --> QImage"+char(34)+","+char(34)+"transformed(QTransform transform, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"transformed_2(QMatrix matrix, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"trueMatrix(QTransform matrix, int width, int height) --> QTransform"+char(34)+","+char(34)+"trueMatrix_2(QMatrix m, int w, int h) --> QMatrix"+char(34)+","+char(34)+"width(void) --> int"+char(34)+"]"
			],
			[
				"interactionid",
				14
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE2LIST = ["+char(34)+"cacheKey(void) --> qint64"+char(34)+","+char(34)+"convertFromImage(QImage image, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"copy(int x, int y, int width, int height) --> QPixmap"+char(34)+","+char(34)+"copy_2(QRect rectangle) --> QPixmap"+char(34)+","+char(34)+"createHeuristicMask(bool clipTight) --> QBitmap"+char(34)+","+char(34)+"createMaskFromColor(QColor , Qt::MaskMode) --> QBitmap"+char(34)+","+char(34)+"defaultDepth(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"depth(void) --> int"+char(34)+","+char(34)+"detach(void) --> void"+char(34)+","+char(34)+"devicePixelRatio(void) --> qreal"+char(34)+","+char(34)+"fill(QColor) --> void"+char(34)+","+char(34)+"fromImage(QImage,Qt::ImageConversionFlags) --> QPixmap"+char(34)+","+char(34)+"fromImage_2(QImage image, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"hasAlpha(void) --> bool"+char(34)+","+char(34)+"hasAlphaChannel(void) --> bool"+char(34)+","+char(34)+"height(void) --> int"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"isNull(void) --> bool"+char(34)+","+char(34)+"isQBitmap(void) --> bool"+char(34)+","+char(34)+"loadFromData(uchar *data, uint len, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadFromData_2(QByteArray data, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadpixmap(QString, char *, Qt::ImageConversionFlags ) --> bool"+char(34)+","+char(34)+"mask(void) --> QBitmap"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"rect(void) --> QRect"+char(34)+","+char(34)+"save(QString fileName, char *format, int quality) --> bool"+char(34)+","+char(34)+"save_2(QIODevice *device, char *format, int quality) --> bool"+char(34)+","+char(34)+"scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaled_2(QSize size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaledToHeight(int height, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scaledToWidth(int width, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed) --> void"+char(34)+","+char(34)+"scroll_2(int dx, int dy, QRect rect, QRegion *exposed) --> void"+char(34)+","+char(34)+"setDevicePixelRatio(qreal scaleFactor) --> void"+char(34)+","+char(34)+"setMask(QBitmap) --> void"+char(34)+","+char(34)+"size(void) --> QSize"+char(34)+","+char(34)+"swap(QPixmap other) --> void"+char(34)+","+char(34)+"toImage(void) --> QImage"+char(34)+","+char(34)+"transformed(QTransform transform, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"transformed_2(QMatrix matrix, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"trueMatrix(QTransform matrix, int width, int height) --> QTransform"+char(34)+","+char(34)+"trueMatrix_2(QMatrix m, int w, int h) --> QMatrix"+char(34)+","+char(34)+"width(void) --> int"+char(34)+"]"
			]
		]
	],
	[
		15,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE3</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;المعطيات&nbsp;:&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE3 = "+char(34)+"المعطيات :"+char(34)+""
			],
			[
				"interactionid",
				15
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE3 = "+char(34)+"المعطيات :"+char(34)+""
			]
		]
	],
	[
		16,
		1,
		[
			[
				"name",
				"<span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">T_CT_QPIXMAPCLASS_IP_VALUE4</font></span> = <span style="+char(34)+"background-color:C_STEPCOLOR_DATA_BACKCOLOR"+char(34)+"><font color="+char(34)+"C_STEPCOLOR_DATA_TEXT"+char(34)+">&quot;الناتج&nbsp;:&quot;</font></span>"
			],
			[
				"active",
				1
			],
			[
				"code",
				"T_CT_QPIXMAPCLASS_IP_VALUE4 = "+char(34)+"الناتج :"+char(34)+""
			],
			[
				"interactionid",
				16
			],
			[
				"visible",
				1
			],
			[
				"stepnumber",
				1
			],
			[
				"steptype",
				2
			],
			[
				"plainname",
				"T_CT_QPIXMAPCLASS_IP_VALUE4 = "+char(34)+"الناتج :"+char(34)+""
			]
		]
	]
]

aInteractionsTable = [
	[
		1,
		1,
		"",
		"07/02/2025",
		"18:37:49",
		""
	],
	[
		2,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;/*;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		3,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;**	Project : Programming Without Coding Technology (PWCT) Version 2.0;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		4,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;**	File Purpose :  qpixmapclass Component;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		5,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;**	Date : 2018.03.18;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		6,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;**	Author :  Mahmoud Fayed <msfclipper@yahoo.com>;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		7,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;*/;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		8,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_TITLE;;_RV_;;rightside;;_RV_;;"+char(34)+"مكون فئة خريطة النقاط "+char(34)+";;_RV_;;"
	],
	[
		9,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE;;_RV_;;rightside;;_RV_;;"+char(34)+"اسم الكائن :"+char(34)+";;_RV_;;"
	],
	[
		10,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE2;;_RV_;;rightside;;_RV_;;"+char(34)+"الميثود : "+char(34)+";;_RV_;;"
	],
	[
		11,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE2FUNC;;_RV_;;rightside;;_RV_;;["+char(34)+"cachekey"+char(34)+","+char(34)+"convertfromimage"+char(34)+","+char(34)+"copy"+char(34)+","+char(34)+"copy_2"+char(34)+","+char(34)+"createheuristicmask"+char(34)+","+char(34)+"createmaskfromcolor"+char(34)+","+char(34)+"defaultdepth"+char(34)+","+char(34)+"delete"+char(34)+","+char(34)+"depth"+char(34)+","+char(34)+"detach"+char(34)+","+char(34)+"devicepixelratio"+char(34)+","+char(34)+"fill"+char(34)+","+char(34)+"fromimage"+char(34)+","+char(34)+"fromimage_2"+char(34)+","+char(34)+"fromimagereader"+char(34)+","+char(34)+"hasalpha"+char(34)+","+char(34)+"hasalphachannel"+char(34)+","+char(34)+"height"+char(34)+","+char(34)+"init"+char(34)+","+char(34)+"isnull"+char(34)+","+char(34)+"isqbitmap"+char(34)+","+char(34)+"loadfromdata"+char(34)+","+char(34)+"loadfromdata_2"+char(34)+","+char(34)+"loadpixmap"+char(34)+","+char(34)+"mask"+char(34)+","+char(34)+"objectpointer"+char(34)+","+char(34)+"rect"+char(34)+","+char(34)+"save"+char(34)+","+char(34)+"save_2"+char(34)+","+char(34)+"scaled"+char(34)+","+char(34)+"scaled_2"+char(34)+","+char(34)+"scaledtoheight"+char(34)+","+char(34)+"scaledtowidth"+char(34)+","+char(34)+"scroll"+char(34)+","+char(34)+"scroll_2"+char(34)+","+char(34)+"setdevicepixelratio"+char(34)+","+char(34)+"setmask"+char(34)+","+char(34)+"size"+char(34)+","+char(34)+"swap"+char(34)+","+char(34)+"toimage"+char(34)+","+char(34)+"transformed"+char(34)+","+char(34)+"transformed_2"+char(34)+","+char(34)+"truematrix"+char(34)+","+char(34)+"truematrix_2"+char(34)+","+char(34)+"width"+char(34)+"];;_RV_;;"
	],
	[
		12,
		1,
		"comment_text",
		"07/02/2025",
		"18:37:49",
		"value;;_RV_;;Copy the list to support changing the generated method name in the Steps Tree;;_RV_;;value2;;_RV_;;0;;_RV_;;"
	],
	[
		13,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE2STEPFUNC;;_RV_;;rightside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE2FUNC;;_RV_;;"
	],
	[
		14,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE2LIST;;_RV_;;rightside;;_RV_;;["+char(34)+"cacheKey(void) --> qint64"+char(34)+","+char(34)+"convertFromImage(QImage image, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"copy(int x, int y, int width, int height) --> QPixmap"+char(34)+","+char(34)+"copy_2(QRect rectangle) --> QPixmap"+char(34)+","+char(34)+"createHeuristicMask(bool clipTight) --> QBitmap"+char(34)+","+char(34)+"createMaskFromColor(QColor , Qt::MaskMode) --> QBitmap"+char(34)+","+char(34)+"defaultDepth(void) --> int"+char(34)+","+char(34)+"delete(void) --> void"+char(34)+","+char(34)+"depth(void) --> int"+char(34)+","+char(34)+"detach(void) --> void"+char(34)+","+char(34)+"devicePixelRatio(void) --> qreal"+char(34)+","+char(34)+"fill(QColor) --> void"+char(34)+","+char(34)+"fromImage(QImage,Qt::ImageConversionFlags) --> QPixmap"+char(34)+","+char(34)+"fromImage_2(QImage image, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags) --> QPixmap"+char(34)+","+char(34)+"hasAlpha(void) --> bool"+char(34)+","+char(34)+"hasAlphaChannel(void) --> bool"+char(34)+","+char(34)+"height(void) --> int"+char(34)+","+char(34)+"init(parent) --> object"+char(34)+","+char(34)+"isNull(void) --> bool"+char(34)+","+char(34)+"isQBitmap(void) --> bool"+char(34)+","+char(34)+"loadFromData(uchar *data, uint len, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadFromData_2(QByteArray data, char *format, Qt::ImageConversionFlags flags) --> bool"+char(34)+","+char(34)+"loadpixmap(QString, char *, Qt::ImageConversionFlags ) --> bool"+char(34)+","+char(34)+"mask(void) --> QBitmap"+char(34)+","+char(34)+"objectpointer(void) --> pointer"+char(34)+","+char(34)+"rect(void) --> QRect"+char(34)+","+char(34)+"save(QString fileName, char *format, int quality) --> bool"+char(34)+","+char(34)+"save_2(QIODevice *device, char *format, int quality) --> bool"+char(34)+","+char(34)+"scaled(int width, int height, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaled_2(QSize size, Qt::AspectRatioMode aspectRatioMode, Qt::TransformationMode transformMode) --> QPixmap"+char(34)+","+char(34)+"scaledToHeight(int height, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scaledToWidth(int width, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed) --> void"+char(34)+","+char(34)+"scroll_2(int dx, int dy, QRect rect, QRegion *exposed) --> void"+char(34)+","+char(34)+"setDevicePixelRatio(qreal scaleFactor) --> void"+char(34)+","+char(34)+"setMask(QBitmap) --> void"+char(34)+","+char(34)+"size(void) --> QSize"+char(34)+","+char(34)+"swap(QPixmap other) --> void"+char(34)+","+char(34)+"toImage(void) --> QImage"+char(34)+","+char(34)+"transformed(QTransform transform, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"transformed_2(QMatrix matrix, Qt::TransformationMode mode) --> QPixmap"+char(34)+","+char(34)+"trueMatrix(QTransform matrix, int width, int height) --> QTransform"+char(34)+","+char(34)+"trueMatrix_2(QMatrix m, int w, int h) --> QMatrix"+char(34)+","+char(34)+"width(void) --> int"+char(34)+"];;_RV_;;"
	],
	[
		15,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE3;;_RV_;;rightside;;_RV_;;"+char(34)+"المعطيات :"+char(34)+";;_RV_;;"
	],
	[
		16,
		1,
		"assignment",
		"07/02/2025",
		"18:37:49",
		"leftside;;_RV_;;T_CT_QPIXMAPCLASS_IP_VALUE4;;_RV_;;rightside;;_RV_;;"+char(34)+"الناتج :"+char(34)+";;_RV_;;"
	]
]

# End of Visual Source File